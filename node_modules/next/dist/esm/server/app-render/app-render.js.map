{"version":3,"sources":["../../../src/server/app-render/app-render.tsx"],"sourcesContent":["import type {\n  ActionResult,\n  DynamicParamTypesShort,\n  FlightRouterState,\n  FlightSegmentPath,\n  RenderOpts,\n  Segment,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n  RSCPayload,\n  FlightData,\n  InitialRSCPayload,\n} from './types'\nimport type { WorkStore } from '../app-render/work-async-storage.external'\nimport type { RequestStore } from '../app-render/work-unit-async-storage.external'\nimport type { NextParsedUrlQuery } from '../request-meta'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport type { AppPageModule } from '../route-modules/app-page/module'\nimport type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders } from 'http'\n\nimport React, { type ErrorInfo, type JSX } from 'react'\n\nimport RenderResult, {\n  type AppPageRenderResultMetadata,\n  type RenderResultOptions,\n} from '../render-result'\nimport {\n  chainStreams,\n  renderToInitialFizzStream,\n  createDocumentClosingStream,\n  continueFizzStream,\n  continueDynamicPrerender,\n  continueStaticPrerender,\n  continueDynamicHTMLResume,\n  streamToBuffer,\n  streamToString,\n} from '../stream-utils/node-web-streams-helper'\nimport { stripInternalQueries } from '../internal-utils'\nimport {\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_ROUTER_STALE_TIME_HEADER,\n  NEXT_URL,\n  RSC_HEADER,\n} from '../../client/components/app-router-headers'\nimport {\n  createTrackedMetadataContext,\n  createMetadataContext,\n} from '../../lib/metadata/metadata-context'\nimport { createRequestStoreForRender } from '../async-storage/request-store'\nimport { withWorkStore } from '../async-storage/with-work-store'\nimport { isNotFoundError } from '../../client/components/not-found'\nimport {\n  getURLFromRedirectError,\n  isRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { getImplicitTags } from '../lib/implicit-tags'\nimport { AppRenderSpan, NextNodeServerSpan } from '../lib/trace/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  createFlightReactServerErrorHandler,\n  createHTMLReactServerErrorHandler,\n  createHTMLErrorHandler,\n  type DigestedError,\n  isUserLandError,\n} from './create-error-handler'\nimport {\n  getShortDynamicParamType,\n  dynamicParamTypes,\n} from './get-short-dynamic-param-type'\nimport { getSegmentParam } from './get-segment-param'\nimport { getScriptNonceFromHeader } from './get-script-nonce-from-header'\nimport { parseAndValidateFlightRouterState } from './parse-and-validate-flight-router-state'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport { handleAction } from './action-handler'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { warn, error } from '../../build/output/log'\nimport { appendMutableCookies } from '../web/spec-extension/adapters/request-cookies'\nimport { createServerInsertedHTML } from './server-inserted-html'\nimport { getRequiredScripts } from './required-scripts'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport { makeGetServerInsertedHTML } from './make-get-server-inserted-html'\nimport { walkTreeWithFlightRouterState } from './walk-tree-with-flight-router-state'\nimport { createComponentTree } from './create-component-tree'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { setReferenceManifestsSingleton } from './encryption-utils'\nimport {\n  DynamicState,\n  type PostponedState,\n  parsePostponedState,\n} from './postponed-state'\nimport {\n  getDynamicDataPostponedState,\n  getDynamicHTMLPostponedState,\n  getPostponedFromState,\n} from './postponed-state'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  useFlightStream,\n  createInlinedDataReadableStream,\n} from './use-flight-response'\nimport {\n  StaticGenBailoutError,\n  isStaticGenBailoutError,\n} from '../../client/components/static-generation-bailout'\nimport { getStackWithoutErrorMessage } from '../../lib/format-server-error'\nimport {\n  accessedDynamicData,\n  createPostponedAbortSignal,\n  formatDynamicAPIAccesses,\n  isPrerenderInterruptedError,\n  createDynamicTrackingState,\n  createDynamicValidationState,\n  getFirstDynamicReason,\n  trackAllowedDynamicAccess,\n  throwIfDisallowedDynamic,\n  consumeDynamicAccess,\n  type DynamicAccess,\n} from './dynamic-rendering'\nimport {\n  getClientComponentLoaderMetrics,\n  wrapClientComponentLoader,\n} from '../client-component-renderer-logger'\nimport { createServerModuleMap } from './action-utils'\nimport { isNodeNextRequest } from '../base-http/helpers'\nimport { parseParameter } from '../../shared/lib/router/utils/route-regex'\nimport { parseRelativeUrl } from '../../shared/lib/router/utils/parse-relative-url'\nimport AppRouter from '../../client/components/app-router'\nimport type { ServerComponentsHmrCache } from '../response-cache'\nimport type { RequestErrorContext } from '../instrumentation/types'\nimport { getServerActionRequestMetadata } from '../lib/server-action-request-meta'\nimport { createInitialRouterState } from '../../client/components/router-reducer/create-initial-router-state'\nimport { createMutableActionQueue } from '../../shared/lib/router/action-queue'\nimport { getRevalidateReason } from '../instrumentation/utils'\nimport { PAGE_SEGMENT_KEY } from '../../shared/lib/segment'\nimport type { FallbackRouteParams } from '../request/fallback-params'\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  type ReactServerPrerenderResult,\n  ReactServerResult,\n  createReactServerPrerenderResult,\n  createReactServerPrerenderResultFromRender,\n  prerenderAndAbortInSequentialTasks,\n  prerenderServerWithPhases,\n  prerenderClientWithPhases,\n} from './app-render-prerender-utils'\nimport { printDebugThrownValueForProspectiveRender } from './prospective-render-utils'\nimport { scheduleInSequentialTasks } from './app-render-render-utils'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport {\n  workUnitAsyncStorage,\n  type PrerenderStore,\n} from './work-unit-async-storage.external'\nimport { CacheSignal } from './cache-signal'\nimport { getTracedMetadata } from '../lib/trace/utils'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nimport './clean-async-snapshot.external'\nimport { INFINITE_CACHE } from '../../lib/constants'\nimport { createComponentStylesAndScripts } from './create-component-styles-and-scripts'\nimport { parseLoaderTree } from './parse-loader-tree'\n\nexport type GetDynamicParamFromSegment = (\n  // [slug] / [[slug]] / [...slug]\n  segment: string\n) => {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null\n\nexport type GenerateFlight = typeof generateDynamicFlightRenderResult\n\nexport type AppRenderContext = {\n  workStore: WorkStore\n  requestStore: RequestStore\n  componentMod: AppPageModule\n  renderOpts: RenderOpts\n  parsedRequestHeaders: ParsedRequestHeaders\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  query: NextParsedUrlQuery\n  isPrefetch: boolean\n  isAction: boolean\n  requestTimestamp: number\n  appUsingSizeAdjustment: boolean\n  flightRouterState?: FlightRouterState\n  requestId: string\n  pagePath: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  assetPrefix: string\n  isNotFoundPath: boolean\n  nonce: string | undefined\n  res: BaseNextResponse\n}\n\ninterface ParseRequestHeadersOptions {\n  readonly isDevWarmup: undefined | boolean\n  readonly isRoutePPREnabled: boolean\n}\n\nconst flightDataPathHeadKey = 'h'\n\ninterface ParsedRequestHeaders {\n  /**\n   * Router state provided from the client-side router. Used to handle rendering\n   * from the common layout down. This value will be undefined if the request is\n   * not a client-side navigation request, or if the request is a prefetch\n   * request.\n   */\n  readonly flightRouterState: FlightRouterState | undefined\n  readonly isPrefetchRequest: boolean\n  readonly isDevWarmupRequest: boolean\n  readonly isHmrRefresh: boolean\n  readonly isRSCRequest: boolean\n  readonly nonce: string | undefined\n}\n\nfunction parseRequestHeaders(\n  headers: IncomingHttpHeaders,\n  options: ParseRequestHeadersOptions\n): ParsedRequestHeaders {\n  const isDevWarmupRequest = options.isDevWarmup === true\n\n  // dev warmup requests are treated as prefetch RSC requests\n  const isPrefetchRequest =\n    isDevWarmupRequest ||\n    headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] !== undefined\n\n  const isHmrRefresh =\n    headers[NEXT_HMR_REFRESH_HEADER.toLowerCase()] !== undefined\n\n  // dev warmup requests are treated as prefetch RSC requests\n  const isRSCRequest =\n    isDevWarmupRequest || headers[RSC_HEADER.toLowerCase()] !== undefined\n\n  const shouldProvideFlightRouterState =\n    isRSCRequest && (!isPrefetchRequest || !options.isRoutePPREnabled)\n\n  const flightRouterState = shouldProvideFlightRouterState\n    ? parseAndValidateFlightRouterState(\n        headers[NEXT_ROUTER_STATE_TREE_HEADER.toLowerCase()]\n      )\n    : undefined\n\n  const csp =\n    headers['content-security-policy'] ||\n    headers['content-security-policy-report-only']\n\n  const nonce =\n    typeof csp === 'string' ? getScriptNonceFromHeader(csp) : undefined\n\n  return {\n    flightRouterState,\n    isPrefetchRequest,\n    isHmrRefresh,\n    isRSCRequest,\n    isDevWarmupRequest,\n    nonce,\n  }\n}\n\nfunction createNotFoundLoaderTree(loaderTree: LoaderTree): LoaderTree {\n  // Align the segment with parallel-route-default in next-app-loader\n  const components = loaderTree[2]\n  return [\n    '',\n    {\n      children: [\n        PAGE_SEGMENT_KEY,\n        {},\n        {\n          page: components['not-found'],\n        },\n      ],\n    },\n    components,\n  ]\n}\n\nexport type CreateSegmentPath = (child: FlightSegmentPath) => FlightSegmentPath\n\n/**\n * Returns a function that parses the dynamic segment and return the associated value.\n */\nfunction makeGetDynamicParamFromSegment(\n  params: { [key: string]: any },\n  pagePath: string,\n  fallbackRouteParams: FallbackRouteParams | null\n): GetDynamicParamFromSegment {\n  return function getDynamicParamFromSegment(\n    // [slug] / [[slug]] / [...slug]\n    segment: string\n  ) {\n    const segmentParam = getSegmentParam(segment)\n    if (!segmentParam) {\n      return null\n    }\n\n    const key = segmentParam.param\n\n    let value = params[key]\n\n    if (fallbackRouteParams && fallbackRouteParams.has(segmentParam.param)) {\n      value = fallbackRouteParams.get(segmentParam.param)\n    } else if (Array.isArray(value)) {\n      value = value.map((i) => encodeURIComponent(i))\n    } else if (typeof value === 'string') {\n      value = encodeURIComponent(value)\n    }\n\n    if (!value) {\n      const isCatchall = segmentParam.type === 'catchall'\n      const isOptionalCatchall = segmentParam.type === 'optional-catchall'\n\n      if (isCatchall || isOptionalCatchall) {\n        const dynamicParamType = dynamicParamTypes[segmentParam.type]\n        // handle the case where an optional catchall does not have a value,\n        // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n        if (isOptionalCatchall) {\n          return {\n            param: key,\n            value: null,\n            type: dynamicParamType,\n            treeSegment: [key, '', dynamicParamType],\n          }\n        }\n\n        // handle the case where a catchall or optional catchall does not have a value,\n        // e.g. `/foo/bar/hello` and `@slot/[...catchall]` or `@slot/[[...catchall]]` is matched\n        value = pagePath\n          .split('/')\n          // remove the first empty string\n          .slice(1)\n          // replace any dynamic params with the actual values\n          .flatMap((pathSegment) => {\n            const param = parseParameter(pathSegment)\n            // if the segment matches a param, return the param value\n            // otherwise, it's a static segment, so just return that\n            return params[param.key] ?? param.key\n          })\n\n        return {\n          param: key,\n          value,\n          type: dynamicParamType,\n          // This value always has to be a string.\n          treeSegment: [key, value.join('/'), dynamicParamType],\n        }\n      }\n    }\n\n    const type = getShortDynamicParamType(segmentParam.type)\n\n    return {\n      param: key,\n      // The value that is passed to user code.\n      value: value,\n      // The value that is rendered in the router tree.\n      treeSegment: [key, Array.isArray(value) ? value.join('/') : value, type],\n      type: type,\n    }\n  }\n}\n\nfunction NonIndex({ ctx }: { ctx: AppRenderContext }) {\n  const is404Page = ctx.pagePath === '/404'\n  const isInvalidStatusCode =\n    typeof ctx.res.statusCode === 'number' && ctx.res.statusCode > 400\n\n  if (is404Page || isInvalidStatusCode) {\n    return <meta name=\"robots\" content=\"noindex\" />\n  }\n  return null\n}\n\n/**\n * This is used by server actions & client-side navigations to generate RSC data from a client-side request.\n * This function is only called on \"dynamic\" requests (ie, there wasn't already a static response).\n * It uses request headers (namely `Next-Router-State-Tree`) to determine where to start rendering.\n */\nasync function generateDynamicRSCPayload(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n  }\n): Promise<RSCPayload> {\n  ctx.requestStore.phase = 'render'\n  // Flight data that is going to be passed to the browser.\n  // Currently a single item array but in the future multiple patches might be combined in a single request.\n\n  // We initialize `flightData` to an empty string because the client router knows how to tolerate\n  // it (treating it as an MPA navigation). The only time this function wouldn't generate flight data\n  // is for server actions, if the server action handler instructs this function to skip it. When the server\n  // action reducer sees a falsy value, it'll simply resolve the action with no data.\n  let flightData: FlightData = ''\n\n  const {\n    componentMod: {\n      tree: loaderTree,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    requestStore: { url },\n    query,\n    requestId,\n    flightRouterState,\n    workStore,\n  } = ctx\n\n  if (!options?.skipFlight) {\n    const preloadCallbacks: PreloadCallbacks = []\n\n    const searchParams = createServerSearchParamsForMetadata(query, workStore)\n    const [MetadataTree, getMetadataReady] = createMetadataComponents({\n      tree: loaderTree,\n      searchParams,\n      metadataContext: createTrackedMetadataContext(\n        url.pathname,\n        ctx.renderOpts,\n        workStore\n      ),\n      getDynamicParamFromSegment,\n      appUsingSizeAdjustment,\n      createServerParamsForMetadata,\n      workStore,\n      MetadataBoundary,\n      ViewportBoundary,\n    })\n    flightData = (\n      await walkTreeWithFlightRouterState({\n        ctx,\n        createSegmentPath: (child) => child,\n        loaderTreeToFilter: loaderTree,\n        parentParams: {},\n        flightRouterState,\n        isFirst: true,\n        // For flight, render metadata inside leaf page\n        rscPayloadHead: (\n          <React.Fragment key={flightDataPathHeadKey}>\n            <NonIndex ctx={ctx} />\n            {/* Adding requestId as react key to make metadata remount for each render */}\n            <MetadataTree key={requestId} />\n          </React.Fragment>\n        ),\n        injectedCSS: new Set(),\n        injectedJS: new Set(),\n        injectedFontPreloadTags: new Set(),\n        rootLayoutIncluded: false,\n        getMetadataReady,\n        preloadCallbacks,\n      })\n    ).map((path) => path.slice(1)) // remove the '' (root) segment\n  }\n\n  // If we have an action result, then this is a server action response.\n  // We can rely on this because `ActionResult` will always be a promise, even if\n  // the result is falsey.\n  if (options?.actionResult) {\n    return {\n      a: options.actionResult,\n      f: flightData,\n      b: ctx.renderOpts.buildId,\n    }\n  }\n\n  // Otherwise, it's a regular RSC response.\n  return {\n    b: ctx.renderOpts.buildId,\n    f: flightData,\n    S: workStore.isStaticGeneration,\n  }\n}\n\nfunction createErrorContext(\n  ctx: AppRenderContext,\n  renderSource: RequestErrorContext['renderSource']\n): RequestErrorContext {\n  return {\n    routerKind: 'App Router',\n    routePath: ctx.pagePath,\n    routeType: ctx.isAction ? 'action' : 'render',\n    renderSource,\n    revalidateReason: getRevalidateReason(ctx.workStore),\n  }\n}\n/**\n * Produces a RenderResult containing the Flight data for the given request. See\n * `generateDynamicRSCPayload` for information on the contents of the render result.\n */\nasync function generateDynamicFlightRenderResult(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n    temporaryReferences?: WeakMap<any, string>\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    !!renderOpts.dev,\n    onFlightDataRenderError\n  )\n\n  const RSCPayload: RSCPayload & {\n    /** Only available during dynamicIO development builds. Used for logging errors. */\n    _validation?: Promise<React.ReactNode>\n  } = await generateDynamicRSCPayload(ctx, options)\n\n  if (\n    // We only want this behavior when running `next dev`\n    renderOpts.dev &&\n    // We only want this behavior when we have React's dev builds available\n    process.env.NODE_ENV === 'development' &&\n    // We only have a Prerender environment for projects opted into dynamicIO\n    renderOpts.experimental.dynamicIO\n  ) {\n    const [resolveValidation, validationOutlet] = createValidationOutlet()\n    RSCPayload._validation = validationOutlet\n\n    spawnDynamicValidationInDev(\n      resolveValidation,\n      ctx.componentMod.tree,\n      ctx,\n      false,\n      ctx.clientReferenceManifest,\n      ctx.workStore.route\n    )\n  }\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = ctx.componentMod.renderToReadableStream(\n    RSCPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n      temporaryReferences: options?.temporaryReferences,\n    }\n  )\n\n  return new FlightRenderResult(flightReadableStream, {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n  })\n}\n\n/**\n * Performs a \"warmup\" render of the RSC payload for a given route. This function is called by the server\n * prior to an actual render request in Dev mode only. It's purpose is to fill caches so the actual render\n * can accurately log activity in the right render context (Prerender vs Render).\n *\n * At the moment this implementation is mostly a fork of generateDynamicFlightRenderResult\n */\nasync function warmupDevRender(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n  if (!renderOpts.dev) {\n    throw new InvariantError(\n      'generateDynamicFlightRenderResult should never be called in `next start` mode.'\n    )\n  }\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    true,\n    onFlightDataRenderError\n  )\n\n  const rscPayload = await generateDynamicRSCPayload(ctx, options)\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = ctx.componentMod.renderToReadableStream(\n    rscPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n    }\n  )\n\n  const reader = flightReadableStream.getReader()\n  while (true) {\n    if ((await reader.read()).done) {\n      break\n    }\n  }\n\n  // We don't really want to return a result here but the stack of functions\n  // that calls into renderToHTML... expects a result. We should refactor this to\n  // lift the warmup pathway outside of renderToHTML... but for now this suffices\n  return new FlightRenderResult('', {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n  })\n}\n\n/**\n * Crawlers will inadvertently think the canonicalUrl in the RSC payload should be crawled\n * when our intention is to just seed the router state with the current URL.\n * This function splits up the pathname so that we can later join it on\n * when we're ready to consume the path.\n */\nfunction prepareInitialCanonicalUrl(url: RequestStore['url']) {\n  return (url.pathname + url.search).split('/')\n}\n\n// This is the data necessary to render <AppRouter /> when no SSR errors are encountered\nasync function getRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  is404: boolean\n): Promise<InitialRSCPayload & { P: React.ReactNode }> {\n  const injectedCSS = new Set<string>()\n  const injectedJS = new Set<string>()\n  const injectedFontPreloadTags = new Set<string>()\n  let missingSlots: Set<string> | undefined\n\n  // We only track missing parallel slots in development\n  if (process.env.NODE_ENV === 'development') {\n    missingSlots = new Set<string>()\n  }\n\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    requestStore: { url },\n    workStore,\n  } = ctx\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree, getMetadataReady] = createMetadataComponents({\n    tree,\n    errorType: is404 ? 'not-found' : undefined,\n    searchParams,\n    metadataContext: createTrackedMetadataContext(\n      url.pathname,\n      ctx.renderOpts,\n      workStore\n    ),\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const preloadCallbacks: PreloadCallbacks = []\n\n  const seedData = await createComponentTree({\n    ctx,\n    createSegmentPath: (child) => child,\n    loaderTree: tree,\n    parentParams: {},\n    firstItem: true,\n    injectedCSS,\n    injectedJS,\n    injectedFontPreloadTags,\n    rootLayoutIncluded: false,\n    getMetadataReady,\n    missingSlots,\n    preloadCallbacks,\n  })\n\n  // When the `vary` response header is present with `Next-URL`, that means there's a chance\n  // it could respond differently if there's an interception route. We provide this information\n  // to `AppRouter` so that it can properly seed the prefetch cache with a prefix, if needed.\n  const varyHeader = ctx.res.getHeader('vary')\n  const couldBeIntercepted =\n    typeof varyHeader === 'string' && varyHeader.includes(NEXT_URL)\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={ctx.requestId} />\n    </React.Fragment>\n  )\n\n  const globalErrorStyles = await getGlobalErrorStyles(tree, ctx)\n\n  return {\n    // See the comment above the `Preloads` component (below) for why this is part of the payload\n    P: <Preloads preloadCallbacks={preloadCallbacks} />,\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    i: !!couldBeIntercepted,\n    f: [[initialTree, seedData, initialHead]],\n    m: missingSlots,\n    G: [GlobalError, globalErrorStyles],\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  }\n}\n\n/**\n * Preload calls (such as `ReactDOM.preloadStyle` and `ReactDOM.preloadFont`) need to be called during rendering\n * in order to create the appropriate preload tags in the DOM, otherwise they're a no-op. Since we invoke\n * renderToReadableStream with a function that returns component props rather than a component itself, we use\n * this component to \"render  \" the preload calls.\n */\nfunction Preloads({ preloadCallbacks }: { preloadCallbacks: Function[] }) {\n  preloadCallbacks.forEach((preloadFn) => preloadFn())\n  return null\n}\n\n// This is the data necessary to render <AppRouter /> when an error state is triggered\nasync function getErrorRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  errorType: 'not-found' | 'redirect' | undefined\n) {\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    requestStore: { url },\n    requestId,\n    workStore,\n  } = ctx\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree] = createMetadataComponents({\n    tree,\n    searchParams,\n    // We create an untracked metadata context here because we can't postpone\n    // again during the error render.\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    errorType,\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={requestId} />\n      {process.env.NODE_ENV === 'development' && (\n        <meta name=\"next-error\" content=\"not-found\" />\n      )}\n    </React.Fragment>\n  )\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  // For metadata notFound error there's no global not found boundary on top\n  // so we create a not found page with AppRouter\n  const initialSeedData: CacheNodeSeedData = [\n    initialTree[0],\n    <html id=\"__next_error__\">\n      <head></head>\n      <body></body>\n    </html>,\n    {},\n    null,\n  ]\n\n  const globalErrorStyles = await getGlobalErrorStyles(tree, ctx)\n\n  return {\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    m: undefined,\n    i: false,\n    f: [[initialTree, initialSeedData, initialHead]],\n    G: [GlobalError, globalErrorStyles],\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  } satisfies InitialRSCPayload\n}\n\n// This component must run in an SSR context. It will render the RSC root component\nfunction App<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n  ServerInsertedHTMLProvider,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  ServerInsertedHTMLProvider: React.ComponentType<{ children: JSX.Element }>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  const { HeadManagerContext } =\n    require('../../shared/lib/head-manager-context.shared-runtime') as typeof import('../../shared/lib/head-manager-context.shared-runtime')\n\n  return (\n    <HeadManagerContext.Provider\n      value={{\n        appDir: true,\n        nonce,\n      }}\n    >\n      <ServerInsertedHTMLProvider>\n        <AppRouter\n          actionQueue={actionQueue}\n          globalErrorComponentAndStyles={response.G}\n          assetPrefix={response.p}\n        />\n      </ServerInsertedHTMLProvider>\n    </HeadManagerContext.Provider>\n  )\n}\n\n// @TODO our error stream should be probably just use the same root component. But it was previously\n// different I don't want to figure out if that is meaningful at this time so just keeping the behavior\n// consistent for now.\nfunction AppWithoutContext<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  return (\n    <AppRouter\n      actionQueue={actionQueue}\n      globalErrorComponentAndStyles={response.G}\n      assetPrefix={response.p}\n    />\n  )\n}\n\n// We use a trick with TS Generics to branch streams with a type so we can\n// consume the parsed value of a Readable Stream if it was constructed with a\n// certain object shape. The generic type is not used directly in the type so it\n// requires a disabling of the eslint rule disallowing unused vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>\n\nasync function renderToHTMLOrFlightImpl(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  requestStore: RequestStore,\n  workStore: WorkStore,\n  parsedRequestHeaders: ParsedRequestHeaders,\n  requestEndedState: { ended?: boolean },\n  postponedState: PostponedState | null\n) {\n  const isNotFoundPath = pagePath === '/404'\n  if (isNotFoundPath) {\n    res.statusCode = 404\n  }\n\n  // A unique request timestamp used by development to ensure that it's\n  // consistent and won't change during this request. This is important to\n  // avoid that resources can be deduped by React Float if the same resource is\n  // rendered or preloaded multiple times: `<link href=\"a.css?v={Date.now()}\"/>`.\n  const requestTimestamp = Date.now()\n\n  const {\n    serverActionsManifest,\n    ComponentMod,\n    nextFontManifest,\n    serverActions,\n    assetPrefix = '',\n    enableTainting,\n  } = renderOpts\n\n  // We need to expose the bundled `require` API globally for\n  // react-server-dom-webpack. This is a hack until we find a better way.\n  if (ComponentMod.__next_app__) {\n    const instrumented = wrapClientComponentLoader(ComponentMod)\n    // @ts-ignore\n    globalThis.__next_require__ = instrumented.require\n    // When we are prerendering if there is a cacheSignal for tracking\n    // cache reads we wrap the loadChunk in this tracking. This allows us\n    // to treat chunk loading with similar semantics as cache reads to avoid\n    // async loading chunks from causing a prerender to abort too early.\n    // @ts-ignore\n    globalThis.__next_chunk_load__ = (...args: Array<any>) => {\n      const loadingChunk = instrumented.loadChunk(...args)\n      trackChunkLoading(loadingChunk)\n      return loadingChunk\n    }\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // reset isr status at start of request\n    const { pathname } = new URL(req.url || '/', 'http://n')\n    renderOpts.setAppIsrStatus?.(pathname, null)\n  }\n\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextRequest(req)\n  ) {\n    req.originalRequest.on('end', () => {\n      const prerenderStore = workUnitAsyncStorage.getStore()\n      const isPPR =\n        prerenderStore &&\n        (prerenderStore.type === 'prerender' ||\n          prerenderStore.type === 'prerender-ppr')\n          ? !!prerenderStore.dynamicTracking?.dynamicAccesses?.length\n          : false\n\n      if (\n        process.env.NODE_ENV === 'development' &&\n        renderOpts.setAppIsrStatus &&\n        !isPPR &&\n        !requestStore.usedDynamic &&\n        !workStore.forceDynamic\n      ) {\n        // only node can be ISR so we only need to update the status here\n        const { pathname } = new URL(req.url || '/', 'http://n')\n        renderOpts.setAppIsrStatus(pathname, true)\n      }\n\n      requestEndedState.ended = true\n\n      if ('performance' in globalThis) {\n        const metrics = getClientComponentLoaderMetrics({ reset: true })\n        if (metrics) {\n          getTracer()\n            .startSpan(NextNodeServerSpan.clientComponentLoading, {\n              startTime: metrics.clientComponentLoadStart,\n              attributes: {\n                'next.clientComponentLoadCount':\n                  metrics.clientComponentLoadCount,\n                'next.span_type': NextNodeServerSpan.clientComponentLoading,\n              },\n            })\n            .end(\n              metrics.clientComponentLoadStart +\n                metrics.clientComponentLoadTimes\n            )\n        }\n      }\n    })\n  }\n\n  const metadata: AppPageRenderResultMetadata = {}\n\n  const appUsingSizeAdjustment = !!nextFontManifest?.appUsingSizeAdjust\n\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const serverModuleMap = createServerModuleMap({ serverActionsManifest })\n\n  setReferenceManifestsSingleton({\n    page: workStore.page,\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  })\n\n  ComponentMod.patchFetch()\n\n  // Pull out the hooks/references from the component.\n  const { tree: loaderTree, taintObjectReference } = ComponentMod\n\n  if (enableTainting) {\n    taintObjectReference(\n      'Do not pass process.env to client components since it will leak sensitive data',\n      process.env\n    )\n  }\n\n  workStore.fetchMetrics = []\n  metadata.fetchMetrics = workStore.fetchMetrics\n\n  // don't modify original query object\n  query = { ...query }\n  stripInternalQueries(query)\n\n  const {\n    flightRouterState,\n    isPrefetchRequest,\n    isRSCRequest,\n    isDevWarmupRequest,\n    nonce,\n  } = parsedRequestHeaders\n\n  /**\n   * The metadata items array created in next-app-loader with all relevant information\n   * that we need to resolve the final metadata.\n   */\n  let requestId: string\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    requestId = crypto.randomUUID()\n  } else {\n    requestId = require('next/dist/compiled/nanoid').nanoid()\n  }\n\n  /**\n   * Dynamic parameters. E.g. when you visit `/dashboard/vercel` which is rendered by `/dashboard/[slug]` the value will be {\"slug\": \"vercel\"}.\n   */\n  const params = renderOpts.params ?? {}\n\n  const { isStaticGeneration, fallbackRouteParams } = workStore\n\n  const getDynamicParamFromSegment = makeGetDynamicParamFromSegment(\n    params,\n    pagePath,\n    fallbackRouteParams\n  )\n\n  const isActionRequest = getServerActionRequestMetadata(req).isServerAction\n\n  const ctx: AppRenderContext = {\n    componentMod: ComponentMod,\n    renderOpts,\n    requestStore,\n    workStore,\n    parsedRequestHeaders,\n    getDynamicParamFromSegment,\n    query,\n    isPrefetch: isPrefetchRequest,\n    isAction: isActionRequest,\n    requestTimestamp,\n    appUsingSizeAdjustment,\n    flightRouterState,\n    requestId,\n    pagePath,\n    clientReferenceManifest,\n    assetPrefix,\n    isNotFoundPath,\n    nonce,\n    res,\n  }\n\n  getTracer().setRootSpanAttribute('next.route', pagePath)\n\n  if (isStaticGeneration) {\n    // We're either building or revalidating. In either case we need to\n    // prerender our page rather than render it.\n    const prerenderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `prerender route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      prerenderToStream\n    )\n\n    const response = await prerenderToStreamWithTracing(\n      req,\n      res,\n      ctx,\n      metadata,\n      workStore,\n      loaderTree\n    )\n\n    // If we're debugging partial prerendering, print all the dynamic API accesses\n    // that occurred during the render.\n    // @TODO move into renderToStream function\n    if (\n      response.dynamicAccess &&\n      accessedDynamicData(response.dynamicAccess) &&\n      renderOpts.isDebugDynamicAccesses\n    ) {\n      warn('The following dynamic usage was detected:')\n      for (const access of formatDynamicAPIAccesses(response.dynamicAccess)) {\n        warn(access)\n      }\n    }\n\n    // If we encountered any unexpected errors during build we fail the\n    // prerendering phase and the build.\n    if (response.digestErrorsMap.size) {\n      const buildFailingError = response.digestErrorsMap.values().next().value\n      if (buildFailingError) throw buildFailingError\n    }\n    // Pick first userland SSR error, which is also not a RSC error.\n    if (response.ssrErrors.length) {\n      const buildFailingError = response.ssrErrors.find((err) =>\n        isUserLandError(err)\n      )\n      if (buildFailingError) throw buildFailingError\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    if (response.collectedTags) {\n      metadata.fetchTags = response.collectedTags.join(',')\n    }\n\n    // Let the client router know how long to keep the cached entry around.\n    const staleHeader = String(response.collectedStale)\n    res.setHeader(NEXT_ROUTER_STALE_TIME_HEADER, staleHeader)\n    metadata.headers ??= {}\n    metadata.headers[NEXT_ROUTER_STALE_TIME_HEADER] = staleHeader\n\n    // If force static is specifically set to false, we should not revalidate\n    // the page.\n    if (workStore.forceStatic === false || response.collectedRevalidate === 0) {\n      metadata.revalidate = 0\n    } else {\n      // Copy the revalidation value onto the render result metadata.\n      metadata.revalidate =\n        response.collectedRevalidate >= INFINITE_CACHE\n          ? false\n          : response.collectedRevalidate\n    }\n\n    // provide bailout info for debugging\n    if (metadata.revalidate === 0) {\n      metadata.staticBailoutInfo = {\n        description: workStore.dynamicUsageDescription,\n        stack: workStore.dynamicUsageStack,\n      }\n    }\n\n    // Per-segment prefetch data\n    //\n    // All of the segments for a page are generated simultaneously, including\n    // during revalidations. This is to ensure consistency, because it's\n    // possible for a mismatch between a layout and page segment can cause the\n    // client to error during rendering. We want to preserve the ability of the\n    // client to recover from such a mismatch by re-requesting all the segments\n    // to get a consistent view of the page.\n    //\n    // TODO (Per Segment Prefetching): This is placeholder data. Populate with\n    // the actual data generated during prerender.\n    if (renderOpts.experimental.isRoutePPREnabled === true) {\n      const placeholder = Buffer.from(\n        'TODO (Per Segment Prefetching): Not yet implemented\\n'\n      )\n      metadata.segmentFlightData = new Map([\n        // Root segment\n        ['/', placeholder],\n        ['/blog', placeholder],\n        // TODO: Update the client to use the same encoding for segment paths that\n        // we use here, so we don't have to convert between them. Needs to be\n        // filesystem safe.\n        ['/blog/[post]-1-d', placeholder],\n      ])\n    }\n\n    return new RenderResult(await streamToString(response.stream), options)\n  } else {\n    // We're rendering dynamically\n    if (isDevWarmupRequest) {\n      return warmupDevRender(req, ctx)\n    } else if (isRSCRequest) {\n      return generateDynamicFlightRenderResult(req, ctx)\n    }\n\n    const renderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `render route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      renderToStream\n    )\n\n    let formState: null | any = null\n    if (isActionRequest) {\n      // For action requests, we handle them differently with a special render result.\n      const actionRequestResult = await handleAction({\n        req,\n        res,\n        ComponentMod,\n        serverModuleMap,\n        generateFlight: generateDynamicFlightRenderResult,\n        workStore,\n        requestStore,\n        serverActions,\n        ctx,\n      })\n\n      if (actionRequestResult) {\n        if (actionRequestResult.type === 'not-found') {\n          const notFoundLoaderTree = createNotFoundLoaderTree(loaderTree)\n          res.statusCode = 404\n          const stream = await renderToStreamWithTracing(\n            requestStore,\n            req,\n            res,\n            ctx,\n            workStore,\n            notFoundLoaderTree,\n            formState,\n            postponedState\n          )\n\n          return new RenderResult(stream, { metadata })\n        } else if (actionRequestResult.type === 'done') {\n          if (actionRequestResult.result) {\n            actionRequestResult.result.assignMetadata(metadata)\n            return actionRequestResult.result\n          } else if (actionRequestResult.formState) {\n            formState = actionRequestResult.formState\n          }\n        }\n      }\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n\n    const stream = await renderToStreamWithTracing(\n      requestStore,\n      req,\n      res,\n      ctx,\n      workStore,\n      loaderTree,\n      formState,\n      postponedState\n    )\n\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    // Create the new render result for the response.\n    return new RenderResult(stream, options)\n  }\n}\n\nexport type AppPageRender = (\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  fallbackRouteParams: FallbackRouteParams | null,\n  renderOpts: RenderOpts,\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n) => Promise<RenderResult<AppPageRenderResultMetadata>>\n\nexport const renderToHTMLOrFlight: AppPageRender = (\n  req,\n  res,\n  pagePath,\n  query,\n  fallbackRouteParams,\n  renderOpts,\n  serverComponentsHmrCache\n) => {\n  if (!req.url) {\n    throw new Error('Invalid URL')\n  }\n\n  const url = parseRelativeUrl(req.url, undefined, false)\n\n  // We read these values from the request object as, in certain cases,\n  // base-server will strip them to opt into different rendering behavior.\n  const parsedRequestHeaders = parseRequestHeaders(req.headers, {\n    isDevWarmup: renderOpts.isDevWarmup,\n    isRoutePPREnabled: renderOpts.experimental.isRoutePPREnabled === true,\n  })\n\n  const { isHmrRefresh, isPrefetchRequest } = parsedRequestHeaders\n\n  const requestEndedState = { ended: false }\n  let postponedState: PostponedState | null = null\n\n  // If provided, the postpone state should be parsed so it can be provided to\n  // React.\n  if (typeof renderOpts.postponed === 'string') {\n    if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n      throw new Error(\n        'Invariant: postponed state should not be provided when fallback params are provided'\n      )\n    }\n\n    postponedState = parsePostponedState(\n      renderOpts.postponed,\n      renderOpts.params\n    )\n  }\n\n  const implicitTags = getImplicitTags(\n    renderOpts.routeModule.definition.page,\n    url,\n    fallbackRouteParams\n  )\n  // TODO: We need to refactor this so that prerenders do not rely upon the\n  // existence of an outer scoped request store. Then we should move this\n  // store generation inside the appropriate scope like `renderToStream` where\n  // we know we're handling a Request and not a Prerender\n  const requestStore = createRequestStoreForRender(\n    req,\n    res,\n    url,\n    implicitTags,\n    renderOpts.onUpdateCookies,\n    renderOpts.previewProps,\n    isHmrRefresh,\n    serverComponentsHmrCache\n  )\n  return workUnitAsyncStorage.run(requestStore, () => {\n    return withWorkStore(\n      renderOpts.ComponentMod.workAsyncStorage,\n      {\n        page: renderOpts.routeModule.definition.page,\n        fallbackRouteParams,\n        renderOpts,\n        requestEndedState,\n        // @TODO move to workUnitStore of type Request\n        isPrefetchRequest,\n      },\n      (workStore) =>\n        renderToHTMLOrFlightImpl(\n          req,\n          res,\n          pagePath,\n          query,\n          renderOpts,\n          requestStore,\n          workStore,\n          parsedRequestHeaders,\n          requestEndedState,\n          postponedState\n        )\n    )\n  })\n}\n\nasync function renderToStream(\n  requestStore: RequestStore,\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  workStore: WorkStore,\n  tree: LoaderTree,\n  formState: any,\n  postponedState: PostponedState | null\n): Promise<ReadableStream<Uint8Array>> {\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  const silenceLogger = false\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerResult: null | ReactServerResult = null\n\n  const setHeader = res.setHeader.bind(res)\n\n  try {\n    if (\n      // We only want this behavior when running `next dev`\n      renderOpts.dev &&\n      // We only want this behavior when we have React's dev builds available\n      process.env.NODE_ENV === 'development' &&\n      // Edge routes never prerender so we don't have a Prerender environment for anything in edge runtime\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      // We only have a Prerender environment for projects opted into dynamicIO\n      renderOpts.experimental.dynamicIO\n    ) {\n      // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n      const RSCPayload: InitialRSCPayload & {\n        /** Only available during dynamicIO development builds. Used for logging errors. */\n        _validation?: Promise<React.ReactNode>\n      } = await workUnitAsyncStorage.run(\n        requestStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const [resolveValidation, validationOutlet] = createValidationOutlet()\n      RSCPayload._validation = validationOutlet\n\n      const reactServerStream = await workUnitAsyncStorage.run(\n        requestStore,\n        scheduleInSequentialTasks,\n        () => {\n          requestStore.prerenderPhase = true\n          return ComponentMod.renderToReadableStream(\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n              environmentName: () =>\n                requestStore.prerenderPhase === true ? 'Prerender' : 'Server',\n              filterStackFrame(url: string, _functionName: string): boolean {\n                // The default implementation filters out <anonymous> stack frames\n                // but we want to retain them because current Server Components and\n                // built-in Components in parent stacks don't have source location.\n                return !url.startsWith('node:') && !url.includes('node_modules')\n              },\n            }\n          )\n        },\n        () => {\n          requestStore.prerenderPhase = false\n        }\n      )\n\n      spawnDynamicValidationInDev(\n        resolveValidation,\n        tree,\n        ctx,\n        res.statusCode === 404,\n        clientReferenceManifest,\n        workStore.route\n      )\n\n      reactServerResult = new ReactServerResult(reactServerStream)\n    } else {\n      // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n      const RSCPayload = await workUnitAsyncStorage.run(\n        requestStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n\n      reactServerResult = new ReactServerResult(\n        workUnitAsyncStorage.run(\n          requestStore,\n          ComponentMod.renderToReadableStream,\n          RSCPayload,\n          clientReferenceManifest.clientModules,\n          {\n            onError: serverComponentsErrorHandler,\n          }\n        )\n      )\n    }\n\n    // React doesn't start rendering synchronously but we want the RSC render to have a chance to start\n    // before we begin SSR rendering because we want to capture any available preload headers so we tick\n    // one task before continuing\n    await waitAtLeastOneReactRenderTask()\n\n    // If provided, the postpone state should be parsed as JSON so it can be\n    // provided to React.\n    if (typeof renderOpts.postponed === 'string') {\n      if (postponedState?.type === DynamicState.DATA) {\n        // We have a complete HTML Document in the prerender but we need to\n        // still include the new server component render because it was not included\n        // in the static prelude.\n        const inlinedReactServerDataStream = createInlinedDataReadableStream(\n          reactServerResult.tee(),\n          ctx.nonce,\n          formState\n        )\n\n        return chainStreams(\n          inlinedReactServerDataStream,\n          createDocumentClosingStream()\n        )\n      } else if (postponedState) {\n        // We assume we have dynamic HTML requiring a resume render to complete\n        const postponed = getPostponedFromState(postponedState)\n\n        const resume = require('react-dom/server.edge')\n          .resume as (typeof import('react-dom/server.edge'))['resume']\n\n        const htmlStream = await workUnitAsyncStorage.run(\n          requestStore,\n          resume,\n          <App\n            reactServerStream={reactServerResult.tee()}\n            preinitScripts={preinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n            nonce={ctx.nonce}\n          />,\n          postponed,\n          {\n            onError: htmlRendererErrorHandler,\n            nonce: ctx.nonce,\n          }\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        return await continueDynamicHTMLResume(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consume(),\n            ctx.nonce,\n            formState\n          ),\n          getServerInsertedHTML,\n        })\n      }\n    }\n\n    // This is a regular dynamic render\n    const renderToReadableStream = require('react-dom/server.edge')\n      .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n    const htmlStream = await workUnitAsyncStorage.run(\n      requestStore,\n      renderToReadableStream,\n      <App\n        reactServerStream={reactServerResult.tee()}\n        preinitScripts={preinitScripts}\n        clientReferenceManifest={clientReferenceManifest}\n        ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n        nonce={ctx.nonce}\n      />,\n      {\n        onError: htmlRendererErrorHandler,\n        nonce: ctx.nonce,\n        onHeaders: (headers: Headers) => {\n          headers.forEach((value, key) => {\n            setHeader(key, value)\n          })\n        },\n        maxHeadersLength: renderOpts.reactMaxHeadersLength,\n        // When debugging the static shell, client-side rendering should be\n        // disabled to prevent blanking out the page.\n        bootstrapScripts: renderOpts.isDebugStaticShell\n          ? []\n          : [bootstrapScript],\n        formState,\n      }\n    )\n\n    const getServerInsertedHTML = makeGetServerInsertedHTML({\n      polyfills,\n      renderServerInsertedHTML,\n      serverCapturedErrors: allCapturedErrors,\n      basePath: renderOpts.basePath,\n      tracingMetadata: tracingMetadata,\n    })\n    /**\n     * Rules of Static & Dynamic HTML:\n     *\n     *    1.) We must generate static HTML unless the caller explicitly opts\n     *        in to dynamic HTML support.\n     *\n     *    2.) If dynamic HTML support is requested, we must honor that request\n     *        or throw an error. It is the sole responsibility of the caller to\n     *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n     *\n     * These rules help ensure that other existing features like request caching,\n     * coalescing, and ISR continue working as intended.\n     */\n    const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n    const validateRootLayout = renderOpts.dev\n    return await continueFizzStream(htmlStream, {\n      inlinedDataStream: createInlinedDataReadableStream(\n        reactServerResult.consume(),\n        ctx.nonce,\n        formState\n      ),\n      isStaticGeneration: generateStaticHTML,\n      getServerInsertedHTML,\n      serverInsertedHTMLToHead: true,\n      validateRootLayout,\n    })\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    let errorType: 'not-found' | 'redirect' | undefined\n\n    if (isNotFoundError(err)) {\n      errorType = 'not-found'\n      res.statusCode = 404\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      // If there were mutable cookies set, we need to set them on the\n      // response.\n      const headers = new Headers()\n      if (appendMutableCookies(headers, ctx.requestStore.mutableCookies)) {\n        setHeader('set-cookie', Array.from(headers.values()))\n      }\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      requestStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      requestStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    if (reactServerResult === null) {\n      // We errored when we did not have an RSC stream to read from. This is not just a render\n      // error, we need to throw early\n      throw err\n    }\n\n    try {\n      const fizzStream = await workUnitAsyncStorage.run(\n        requestStore,\n        renderToInitialFizzStream,\n        {\n          ReactDOMServer: require('react-dom/server.edge'),\n          element: (\n            <AppWithoutContext\n              reactServerStream={errorServerStream}\n              preinitScripts={errorPreinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              nonce={ctx.nonce}\n            />\n          ),\n          streamOptions: {\n            nonce: ctx.nonce,\n            // Include hydration scripts in the HTML\n            bootstrapScripts: [errorBootstrapScript],\n            formState,\n          },\n        }\n      )\n\n      /**\n       * Rules of Static & Dynamic HTML:\n       *\n       *    1.) We must generate static HTML unless the caller explicitly opts\n       *        in to dynamic HTML support.\n       *\n       *    2.) If dynamic HTML support is requested, we must honor that request\n       *        or throw an error. It is the sole responsibility of the caller to\n       *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n       *\n       * These rules help ensure that other existing features like request caching,\n       * coalescing, and ISR continue working as intended.\n       */\n      const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n      const validateRootLayout = renderOpts.dev\n      return await continueFizzStream(fizzStream, {\n        inlinedDataStream: createInlinedDataReadableStream(\n          // This is intentionally using the readable datastream from the\n          // main render rather than the flight data from the error page\n          // render\n          reactServerResult.consume(),\n          ctx.nonce,\n          formState\n        ),\n        isStaticGeneration: generateStaticHTML,\n        getServerInsertedHTML: makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: [],\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        }),\n        serverInsertedHTMLToHead: true,\n        validateRootLayout,\n      })\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nfunction createValidationOutlet() {\n  let resolveValidation: (value: React.ReactNode) => void\n  let outlet = new Promise<React.ReactNode>((resolve) => {\n    resolveValidation = resolve\n  })\n  return [resolveValidation!, outlet] as const\n}\n\nasync function spawnDynamicValidationInDev(\n  resolveValidation: (validatingElement: React.ReactNode) => void,\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  isNotFound: boolean,\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>,\n  route: string\n): Promise<void> {\n  const { componentMod: ComponentMod } = ctx\n\n  const cacheSignal = new CacheSignal()\n  const firstAttemptServerController = new AbortController()\n  let serverDynamicTracking = createDynamicTrackingState(false)\n\n  const firstAttemptServerPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: firstAttemptServerController.signal,\n    cacheSignal,\n    // During the prospective render we don't want to synchronously abort on dynamic access\n    // because it could prevent us from discovering all caches in siblings. So we omit the controller\n    // from the prerender store this time.\n    controller: firstAttemptServerController,\n    // With PPR during Prerender we don't need to track individual dynamic reasons\n    // because we will always do a final render after caches have filled and we\n    // will track it again there\n    dynamicTracking: null,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    // Dev only property that allows certain logs to be suppressed\n    validating: true,\n  }\n\n  const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n    firstAttemptServerPrerenderStore,\n    getRSCPayload,\n    tree,\n    ctx,\n    isNotFound\n  )\n\n  let reactServerStream = await workUnitAsyncStorage.run(\n    firstAttemptServerPrerenderStore,\n    ComponentMod.renderToReadableStream,\n    firstAttemptRSCPayload,\n    clientReferenceManifest.clientModules,\n    {\n      signal: firstAttemptServerController.signal,\n      onError: () => {},\n    }\n  )\n\n  await cacheSignal.cacheReady()\n  firstAttemptServerController.abort()\n\n  const secondAttemptServerController = new AbortController()\n  serverDynamicTracking = createDynamicTrackingState(false)\n\n  const secondAttemptServerPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: secondAttemptServerController.signal,\n    cacheSignal: null,\n    // During the prospective render we don't want to synchronously abort on dynamic access\n    // because it could prevent us from discovering all caches in siblings. So we omit the controller\n    // from the prerender store this time.\n    controller: secondAttemptServerController,\n    // With PPR during Prerender we don't need to track individual dynamic reasons\n    // because we will always do a final render after caches have filled and we\n    // will track it again there\n    dynamicTracking: serverDynamicTracking,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    // Dev only property that allows certain logs to be suppressed\n    validating: true,\n  }\n\n  const secondAttemptRSCPayload = await workUnitAsyncStorage.run(\n    secondAttemptServerPrerenderStore,\n    getRSCPayload,\n    tree,\n    ctx,\n    isNotFound\n  )\n\n  reactServerStream = await workUnitAsyncStorage.run(\n    secondAttemptServerPrerenderStore,\n    scheduleInSequentialTasks,\n    () => {\n      const stream = ComponentMod.renderToReadableStream(\n        secondAttemptRSCPayload,\n        clientReferenceManifest.clientModules,\n        {\n          signal: secondAttemptServerController.signal,\n          onError: () => {},\n        }\n      )\n      return asHaltedStream(stream, secondAttemptServerController.signal)\n    },\n    () => {\n      secondAttemptServerController.abort()\n    }\n  )\n\n  const [warmupStream, renderStream] = reactServerStream.tee()\n\n  await warmFlightResponse(warmupStream, clientReferenceManifest)\n\n  const { ServerInsertedHTMLProvider } = createServerInsertedHTML()\n  const nonce = '1'\n\n  const prerender = require('react-dom/static.edge')\n    .prerender as (typeof import('react-dom/static.edge'))['prerender']\n\n  let clientDynamicTracking = createDynamicTrackingState(false)\n  let dynamicValidation = createDynamicValidationState()\n\n  const firstAttemptClientController = new AbortController()\n  const firstAttemptClientPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: firstAttemptClientController.signal,\n    // For HTML Generation we don't need to track cache reads (RSC only)\n    cacheSignal: null,\n    // We expect the SSR render to complete in a single Task and need to be able to synchronously abort\n    // When you use APIs that are considered dynamic or synchronous IO.\n    controller: firstAttemptClientController,\n    // We do track dynamic access because searchParams and certain hooks can still be\n    // dynamic during SSR\n    dynamicTracking: clientDynamicTracking,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    validating: true,\n  }\n\n  const [firstAttemptReactServerStream, secondAttemptReactServerStream] =\n    renderStream.tee()\n  let hadException = false\n  try {\n    await prerenderAndAbortInSequentialTasks(\n      async () => {\n        workUnitAsyncStorage\n          .run(\n            firstAttemptClientPrerenderStore,\n            prerender,\n            <App\n              reactServerStream={firstAttemptReactServerStream}\n              preinitScripts={() => {}}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={nonce}\n            />,\n            {\n              signal: firstAttemptClientController.signal,\n              onError: (err: unknown, errorInfo: ErrorInfo) => {\n                if (\n                  isPrerenderInterruptedError(err) ||\n                  firstAttemptServerController.signal.aborted\n                ) {\n                  const componentStack: string | undefined = (errorInfo as any)\n                    .componentStack\n                  if (\n                    typeof componentStack === 'string' &&\n                    err instanceof Error\n                  ) {\n                    trackAllowedDynamicAccess(\n                      route,\n                      componentStack,\n                      dynamicValidation,\n                      serverDynamicTracking,\n                      clientDynamicTracking\n                    )\n                  }\n                }\n              },\n            }\n          )\n          .catch(() => {})\n        return null\n      },\n      () => {\n        firstAttemptClientController.abort()\n      }\n    ).catch(() => {})\n  } catch (err: unknown) {\n    if (firstAttemptClientController.signal.aborted) {\n      // We aborted the render normally and can ignore this error\n    } else {\n      hadException = true\n      // We're going to retry to so we normally would suppress this error but\n      // when verbose logging is on we print it\n      if (process.env.__NEXT_VERBOSE_LOGGING) {\n        printDebugThrownValueForProspectiveRender(err, route)\n      }\n    }\n  }\n\n  if (hadException || clientDynamicTracking.syncDynamicErrorWithStack) {\n    // We threw something unexpected in the initial render prior to aborting or\n    // we observed a sync abort. In either case we attempt a final render to see if\n    // the error was caused by module loading scope or some other transient cause\n\n    // Reset tracking objects\n    clientDynamicTracking = createDynamicTrackingState(false)\n    dynamicValidation = createDynamicValidationState()\n\n    const secondAttemptClientController = new AbortController()\n    const secondAttemptClientPrerenderStore: PrerenderStore = {\n      type: 'prerender',\n      phase: 'render',\n      implicitTags: [],\n      renderSignal: secondAttemptClientController.signal,\n      // For HTML Generation we don't need to track cache reads (RSC only)\n      cacheSignal: null,\n      // We expect the SSR render to complete in a single Task and need to be able to synchronously abort\n      // When you use APIs that are considered dynamic or synchronous IO.\n      controller: secondAttemptClientController,\n      // We do track dynamic access because searchParams and certain hooks can still be\n      // dynamic during SSR\n      dynamicTracking: clientDynamicTracking,\n      revalidate: INFINITE_CACHE,\n      expire: INFINITE_CACHE,\n      stale: INFINITE_CACHE,\n      tags: [],\n      validating: true,\n    }\n\n    try {\n      await prerenderAndAbortInSequentialTasks(\n        async () => {\n          workUnitAsyncStorage\n            .run(\n              secondAttemptClientPrerenderStore,\n              prerender,\n              <App\n                reactServerStream={secondAttemptReactServerStream}\n                preinitScripts={() => {}}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={nonce}\n              />,\n              {\n                signal: secondAttemptClientController.signal,\n                onError: (err: unknown, errorInfo: ErrorInfo) => {\n                  if (\n                    isPrerenderInterruptedError(err) ||\n                    secondAttemptClientController.signal.aborted\n                  ) {\n                    const componentStack: string | undefined = (\n                      errorInfo as any\n                    ).componentStack\n                    if (\n                      typeof componentStack === 'string' &&\n                      err instanceof Error\n                    ) {\n                      trackAllowedDynamicAccess(\n                        route,\n                        componentStack,\n                        dynamicValidation,\n                        serverDynamicTracking,\n                        clientDynamicTracking\n                      )\n                    }\n                  }\n                },\n              }\n            )\n            .catch(() => {})\n          return null\n        },\n        () => {\n          secondAttemptClientController.abort()\n        }\n      )\n    } catch (err) {\n      if (secondAttemptClientController.signal.aborted) {\n        // We aborted the render normally and can ignore this error\n      } else {\n        // We errored in the shell. This should also mean the normal render errored\n        // in the same place so we omit this log except when verbose mode is on.\n        if (process.env.__NEXT_VERBOSE_LOGGING) {\n          printDebugThrownValueForProspectiveRender(err, route)\n        }\n      }\n    }\n  }\n\n  function LogDynamicValidation() {\n    try {\n      throwIfDisallowedDynamic(\n        route,\n        dynamicValidation,\n        serverDynamicTracking,\n        clientDynamicTracking\n      )\n    } catch {}\n    return null\n  }\n\n  resolveValidation(<LogDynamicValidation />)\n}\n\nfunction asHaltedStream(\n  stream: ReadableStream<Uint8Array>,\n  signal: AbortSignal\n) {\n  return new ReadableStream({\n    start(controller: ReadableStreamDefaultController<Uint8Array>) {\n      const reader = stream.getReader()\n      function errorStream(err: unknown) {\n        controller.error(err)\n        reader.cancel(err)\n      }\n      function progressStream({\n        done,\n        value,\n      }: ReadableStreamReadResult<Uint8Array>) {\n        if (done) {\n          // We don't actually close the outer stream because\n          // we might have aborted the inner one but we are simulating a halt\n          return\n        } else {\n          if (!signal.aborted) {\n            controller.enqueue(value)\n            reader.read().then(progressStream, errorStream)\n          } else {\n            // If the signal aborted we leave the stream open but no longer pull from the upstream\n            reader.cancel()\n          }\n        }\n      }\n      reader.read().then(progressStream, errorStream)\n    },\n  })\n}\n\ntype PrerenderToStreamResult = {\n  stream: ReadableStream<Uint8Array>\n  digestErrorsMap: Map<string, DigestedError>\n  ssrErrors: Array<unknown>\n  dynamicAccess?: null | Array<DynamicAccess>\n  collectedRevalidate: number\n  collectedExpire: number\n  collectedStale: number\n  collectedTags: null | string[]\n}\n\n/**\n * Determines whether we should generate static flight data.\n */\nfunction shouldGenerateStaticFlightData(workStore: WorkStore): boolean {\n  const { fallbackRouteParams, isStaticGeneration } = workStore\n  if (!isStaticGeneration) return false\n\n  if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n    return false\n  }\n\n  return true\n}\n\nasync function prerenderToStream(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  metadata: AppPageRenderResultMetadata,\n  workStore: WorkStore,\n  tree: LoaderTree\n): Promise<PrerenderToStreamResult> {\n  ctx.requestStore.phase = 'render'\n\n  // When prerendering formState is always null. We still include it\n  // because some shared APIs expect a formState value and this is slightly\n  // more explicit than making it an optional function argument\n  const formState = null\n\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n  const fallbackRouteParams = workStore.fallbackRouteParams\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  // We don't report errors during prerendering through our instrumentation hooks\n  const silenceLogger = !!renderOpts.experimental.isRoutePPREnabled\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerPrerenderResult: null | ReactServerPrerenderResult = null\n  const setHeader = (name: string, value: string | string[]) => {\n    res.setHeader(name, value)\n\n    metadata.headers ??= {}\n    metadata.headers[name] = res.getHeader(name)\n\n    return res\n  }\n\n  let prerenderStore: PrerenderStore | null = null\n\n  try {\n    if (renderOpts.experimental.dynamicIO) {\n      if (renderOpts.experimental.isRoutePPREnabled) {\n        /**\n         * dynamicIO with PPR\n         *\n         * The general approach is to render the RSC stream first allowing any cache reads to resolve.\n         * Once we have settled all cache reads we restart the render and abort after a single Task.\n         *\n         * Unlike with the non PPR case we can't synchronously abort the render when a dynamic API is used\n         * during the initial render because we need to ensure all caches can be filled as part of the initial Task\n         * and a synchronous abort might prevent us from filling all caches.\n         *\n         * Once the render is complete we allow the SSR render to finish and use a combination of the postponed state\n         * and the reactServerIsDynamic value to determine how to treat the resulting render\n         */\n\n        // Prerender controller represents the lifetime of the prerender.\n        // It will be aborted when a Task is complete or a synchronously aborting\n        // API is called. Notably during cache-filling renders this does not actually\n        // terminate the render itself which will continue until all caches are filled\n        const initialServerPrerenderController = new AbortController()\n\n        // This controller represents the lifetime of the React render call. Notably\n        // during the cache-filling render it is different from the prerender controller\n        // because we don't want to end the react render until all caches are filled.\n        const initialServerRenderController = new AbortController()\n\n        // The cacheSignal helps us track whether caches are still filling or we are ready\n        // to cut the render off.\n        const cacheSignal = new CacheSignal()\n\n        const initialServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: initialServerRenderController.signal,\n          controller: initialServerPrerenderController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const initialServerPayload = await workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        const pendingInitialServerResult = workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          ComponentMod.prerender,\n          initialServerPayload,\n          clientReferenceManifest.clientModules,\n          {\n            onError: (err: unknown) => {\n              if (initialServerPrerenderController.signal.aborted) {\n                // The render aborted before this error was handled which indicates\n                // the error is caused by unfinished components within the render\n                return\n              } else if (\n                process.env.NEXT_DEBUG_BUILD ||\n                process.env.__NEXT_VERBOSE_LOGGING\n              ) {\n                printDebugThrownValueForProspectiveRender(err, workStore.route)\n              }\n            },\n            // we don't care to track postpones during the prospective render because we need\n            // to always do a final render anyway\n            onPostpone: undefined,\n            // We don't want to stop rendering until the cacheSignal is complete so we pass\n            // a different signal to this render call than is used by dynamic APIs to signify\n            // transitioning out of the prerender environment\n            signal: initialServerRenderController.signal,\n          }\n        )\n\n        await cacheSignal.cacheReady()\n        initialServerRenderController.abort()\n        initialServerPrerenderController.abort()\n\n        let initialServerResult\n        try {\n          initialServerResult = await createReactServerPrerenderResult(\n            pendingInitialServerResult\n          )\n        } catch (err) {\n          if (\n            initialServerRenderController.signal.aborted ||\n            initialServerPrerenderController.signal.aborted\n          ) {\n            // These are expected errors that might error the prerender. we ignore them.\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            // We don't normally log these errors because we are going to retry anyway but\n            // it can be useful for debugging Next.js itself to get visibility here when needed\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n        }\n\n        if (initialServerResult) {\n          // Before we attempt the SSR initial render we need to ensure all client modules\n          // are already loaded.\n          await warmFlightResponse(\n            initialServerResult.asStream(),\n            clientReferenceManifest\n          )\n\n          const initialClientController = new AbortController()\n          const initialClientPrerenderStore: PrerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: ctx.requestStore.implicitTags,\n            renderSignal: initialClientController.signal,\n            controller: initialClientController,\n            cacheSignal: null,\n            dynamicTracking: null,\n            revalidate: INFINITE_CACHE,\n            expire: INFINITE_CACHE,\n            stale: INFINITE_CACHE,\n            tags: [...ctx.requestStore.implicitTags],\n          }\n\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          await prerenderAndAbortInSequentialTasks(\n            () =>\n              workUnitAsyncStorage.run(\n                initialClientPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={initialServerResult.asUnclosingStream()}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: initialClientController.signal,\n                  onError: (err: unknown, _errorInfo: ErrorInfo) => {\n                    if (initialClientController.signal.aborted) {\n                      // These are expected errors that might error the prerender. we ignore them.\n                    } else if (\n                      process.env.NEXT_DEBUG_BUILD ||\n                      process.env.__NEXT_VERBOSE_LOGGING\n                    ) {\n                      // We don't normally log these errors because we are going to retry anyway but\n                      // it can be useful for debugging Next.js itself to get visibility here when needed\n                      printDebugThrownValueForProspectiveRender(\n                        err,\n                        workStore.route\n                      )\n                    }\n                  },\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              ),\n            () => {\n              initialClientController.abort()\n            }\n          ).catch((err) => {\n            if (\n              initialServerRenderController.signal.aborted ||\n              isPrerenderInterruptedError(err)\n            ) {\n              // These are expected errors that might error the prerender. we ignore them.\n            } else if (\n              process.env.NEXT_DEBUG_BUILD ||\n              process.env.__NEXT_VERBOSE_LOGGING\n            ) {\n              // We don't normally log these errors because we are going to retry anyway but\n              // it can be useful for debugging Next.js itself to get visibility here when needed\n              printDebugThrownValueForProspectiveRender(err, workStore.route)\n            }\n          })\n        }\n\n        let serverIsDynamic = false\n        const finalServerController = new AbortController()\n        const serverDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalRenderPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: finalServerController.signal,\n          controller: finalServerController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: serverDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        const finalAttemptRSCPayload = await workUnitAsyncStorage.run(\n          finalRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n        const reactServerResult = (reactServerPrerenderResult =\n          await createReactServerPrerenderResult(\n            prerenderAndAbortInSequentialTasks(\n              () =>\n                workUnitAsyncStorage.run(\n                  // The store to scope\n                  finalRenderPrerenderStore,\n                  // The function to run\n                  ComponentMod.prerender,\n                  // ... the arguments for the function to run\n                  finalAttemptRSCPayload,\n                  clientReferenceManifest.clientModules,\n                  {\n                    onError: (err: unknown) => {\n                      if (finalServerController.signal.aborted) {\n                        serverIsDynamic = true\n                        return\n                      }\n\n                      return serverComponentsErrorHandler(err)\n                    },\n                    signal: finalServerController.signal,\n                  }\n                ),\n              () => {\n                finalServerController.abort()\n              }\n            )\n          ))\n\n        const clientDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        const finalClientController = new AbortController()\n        const finalClientPrerenderStore: PrerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: finalClientController.signal,\n          controller: finalClientController,\n          // For HTML Generation we don't need to track cache reads (RSC only)\n          cacheSignal: null,\n          dynamicTracking: clientDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        }\n\n        let clientIsDynamic = false\n        let dynamicValidation = createDynamicValidationState()\n\n        const prerender = require('react-dom/static.edge')\n          .prerender as (typeof import('react-dom/static.edge'))['prerender']\n        let { prelude, postponed } = await prerenderAndAbortInSequentialTasks(\n          () =>\n            workUnitAsyncStorage.run(\n              finalClientPrerenderStore,\n              prerender,\n              <App\n                reactServerStream={reactServerResult.asUnclosingStream()}\n                preinitScripts={preinitScripts}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              {\n                signal: finalClientController.signal,\n                onError: (err: unknown, errorInfo: ErrorInfo) => {\n                  if (\n                    isPrerenderInterruptedError(err) ||\n                    finalClientController.signal.aborted\n                  ) {\n                    clientIsDynamic = true\n\n                    const componentStack: string | undefined = (\n                      errorInfo as any\n                    ).componentStack\n                    if (typeof componentStack === 'string') {\n                      trackAllowedDynamicAccess(\n                        workStore.route,\n                        componentStack,\n                        dynamicValidation,\n                        serverDynamicTracking,\n                        clientDynamicTracking\n                      )\n                    }\n                    return\n                  }\n\n                  return htmlRendererErrorHandler(err, errorInfo)\n                },\n                onHeaders: (headers: Headers) => {\n                  headers.forEach((value, key) => {\n                    setHeader(key, value)\n                  })\n                },\n                maxHeadersLength: renderOpts.reactMaxHeadersLength,\n                // When debugging the static shell, client-side rendering should be\n                // disabled to prevent blanking out the page.\n                bootstrapScripts: renderOpts.isDebugStaticShell\n                  ? []\n                  : [bootstrapScript],\n              }\n            ),\n          () => {\n            finalClientController.abort()\n          }\n        )\n\n        throwIfDisallowedDynamic(\n          workStore.route,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n\n        if (serverIsDynamic || clientIsDynamic) {\n          if (postponed != null) {\n            // Dynamic HTML case\n            metadata.postponed = getDynamicHTMLPostponedState(\n              postponed,\n              fallbackRouteParams\n            )\n          } else {\n            // Dynamic Data case\n            metadata.postponed = getDynamicDataPostponedState()\n          }\n          reactServerResult.consume()\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueDynamicPrerender(prelude, {\n              getServerInsertedHTML,\n            }),\n            dynamicAccess: consumeDynamicAccess(\n              serverDynamicTracking,\n              clientDynamicTracking\n            ),\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedExpire: finalRenderPrerenderStore.expire,\n            collectedStale: finalRenderPrerenderStore.stale,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        } else {\n          // Static case\n          if (workStore.forceDynamic) {\n            throw new StaticGenBailoutError(\n              'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n            )\n          }\n\n          let htmlStream = prelude\n          if (postponed != null) {\n            // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n            // so we can set all the postponed boundaries to client render mode before we store the HTML response\n            const resume = require('react-dom/server.edge')\n              .resume as (typeof import('react-dom/server.edge'))['resume']\n\n            // We don't actually want to render anything so we just pass a stream\n            // that never resolves. The resume call is going to abort immediately anyway\n            const foreverStream = new ReadableStream<Uint8Array>()\n\n            const resumeStream = await resume(\n              <App\n                reactServerStream={foreverStream}\n                preinitScripts={() => {}}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              JSON.parse(JSON.stringify(postponed)),\n              {\n                signal: createPostponedAbortSignal('static prerender resume'),\n                onError: htmlRendererErrorHandler,\n                nonce: ctx.nonce,\n              }\n            )\n\n            // First we write everything from the prerender, then we write everything from the aborted resume render\n            htmlStream = chainStreams(prelude, resumeStream)\n          }\n\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueStaticPrerender(htmlStream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                reactServerResult.consumeAsStream(),\n                ctx.nonce,\n                formState\n              ),\n              getServerInsertedHTML,\n            }),\n            dynamicAccess: consumeDynamicAccess(\n              serverDynamicTracking,\n              clientDynamicTracking\n            ),\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedExpire: finalRenderPrerenderStore.expire,\n            collectedStale: finalRenderPrerenderStore.stale,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        }\n      } else {\n        /**\n         * dynamicIO without PPR\n         *\n         * The general approach is to render the RSC tree first allowing for any inflight\n         * caches to resolve. Once we have settled inflight caches we can check and see if any\n         * synchronous dynamic APIs were used. If so we don't need to bother doing anything more\n         * because the page will be dynamic on re-render anyway\n         *\n         * If no sync dynamic APIs were used we then re-render and abort after a single Task.\n         * If the render errors we know that the page has some dynamic IO. This assumes and relies\n         * upon caches reading from a in process memory cache and resolving in a microtask. While this\n         * is true from our own default cache implementation and if you don't exceed our LRU size it\n         * might not be true for custom cache implementations.\n         *\n         * Future implementations can do some different strategies during build like using IPC to\n         * synchronously fill caches during this special rendering mode. For now this heuristic should work\n         */\n\n        const cache = workStore.incrementalCache\n        if (!cache) {\n          throw new Error(\n            'Expected incremental cache to exist. This is a bug in Next.js'\n          )\n        }\n\n        // Prerender controller represents the lifetime of the prerender.\n        // It will be aborted when a Task is complete or a synchronously aborting\n        // API is called. Notably during cache-filling renders this does not actually\n        // terminate the render itself which will continue until all caches are filled\n        const initialServerPrerenderController = new AbortController()\n\n        // This controller represents the lifetime of the React render call. Notably\n        // during the cache-filling render it is different from the prerender controller\n        // because we don't want to end the react render until all caches are filled.\n        const initialServerRenderController = new AbortController()\n\n        const cacheSignal = new CacheSignal()\n        const initialServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: initialServerRenderController.signal,\n          controller: initialServerPrerenderController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        const initialClientController = new AbortController()\n        const initialClientPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: initialClientController.signal,\n          controller: initialClientController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        let initialServerStream\n        try {\n          initialServerStream = workUnitAsyncStorage.run(\n            initialServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            firstAttemptRSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: (err: unknown) => {\n                if (\n                  initialServerPrerenderController.signal.aborted ||\n                  initialServerRenderController.signal.aborted\n                ) {\n                  // The render aborted before this error was handled which indicates\n                  // the error is caused by unfinished components within the render\n                  return\n                } else if (\n                  process.env.NEXT_DEBUG_BUILD ||\n                  process.env.__NEXT_VERBOSE_LOGGING\n                ) {\n                  printDebugThrownValueForProspectiveRender(\n                    err,\n                    workStore.route\n                  )\n                }\n              },\n              signal: initialServerRenderController.signal,\n            }\n          )\n        } catch (err: unknown) {\n          if (\n            initialServerPrerenderController.signal.aborted ||\n            initialServerRenderController.signal.aborted\n          ) {\n            // These are expected errors that might error the prerender. we ignore them.\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            // We don't normally log these errors because we are going to retry anyway but\n            // it can be useful for debugging Next.js itself to get visibility here when needed\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n        }\n\n        if (initialServerStream) {\n          const [warmupStream, renderStream] = initialServerStream.tee()\n          initialServerStream = null\n          // Before we attempt the SSR initial render we need to ensure all client modules\n          // are already loaded.\n          await warmFlightResponse(warmupStream, clientReferenceManifest)\n\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          const pendingInitialClientResult = workUnitAsyncStorage.run(\n            initialClientPrerenderStore,\n            prerender,\n            <App\n              reactServerStream={renderStream}\n              preinitScripts={preinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            {\n              signal: initialClientController.signal,\n              onError: (err: unknown, _errorInfo: ErrorInfo) => {\n                if (initialClientController.signal.aborted) {\n                  // These are expected errors that might error the prerender. we ignore them.\n                } else if (\n                  process.env.NEXT_DEBUG_BUILD ||\n                  process.env.__NEXT_VERBOSE_LOGGING\n                ) {\n                  // We don't normally log these errors because we are going to retry anyway but\n                  // it can be useful for debugging Next.js itself to get visibility here when needed\n                  printDebugThrownValueForProspectiveRender(\n                    err,\n                    workStore.route\n                  )\n                }\n              },\n              // When debugging the static shell, client-side rendering should be\n              // disabled to prevent blanking out the page.\n              bootstrapScripts: renderOpts.isDebugStaticShell\n                ? []\n                : [bootstrapScript],\n            }\n          )\n          pendingInitialClientResult.catch((err: unknown) => {\n            if (initialClientController.signal.aborted) {\n              // We aborted the render normally and can ignore this error\n            } else {\n              // We're going to retry to so we normally would suppress this error but\n              // when verbose logging is on we print it\n              if (process.env.__NEXT_VERBOSE_LOGGING) {\n                printDebugThrownValueForProspectiveRender(err, workStore.route)\n              }\n            }\n          })\n        }\n\n        await cacheSignal.cacheReady()\n        // It is important that we abort the SSR render first to avoid\n        // connection closed errors from having an incomplete RSC stream\n        initialClientController.abort()\n        initialServerRenderController.abort()\n        initialServerPrerenderController.abort()\n\n        // We've now filled caches and triggered any inadvertant sync bailouts\n        // due to lazy module initialization. We can restart our render to capture results\n\n        let serverIsDynamic = false\n        const finalServerController = new AbortController()\n        const serverDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: finalServerController.signal,\n          controller: finalServerController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: serverDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        let clientIsDynamic = false\n        const finalClientController = new AbortController()\n        const clientDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        const dynamicValidation = createDynamicValidationState()\n\n        const finalClientPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: finalClientController.signal,\n          controller: finalClientController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: clientDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        const finalServerPayload = await workUnitAsyncStorage.run(\n          finalServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        const serverPrerenderStreamResult = await prerenderServerWithPhases(\n          finalServerController.signal,\n          () =>\n            workUnitAsyncStorage.run(\n              finalServerPrerenderStore,\n              ComponentMod.renderToReadableStream,\n              finalServerPayload,\n              clientReferenceManifest.clientModules,\n              {\n                onError: (err: unknown) => {\n                  if (finalServerController.signal.aborted) {\n                    serverIsDynamic = true\n                    if (isPrerenderInterruptedError(err)) {\n                      return err.digest\n                    }\n                    return\n                  }\n\n                  return serverComponentsErrorHandler(err)\n                },\n                signal: finalServerController.signal,\n              }\n            ),\n          () => {\n            finalServerController.abort()\n          }\n        )\n\n        let htmlStream\n        const serverPhasedStream = serverPrerenderStreamResult.asPhasedStream()\n        try {\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          const result = await prerenderClientWithPhases(\n            () =>\n              workUnitAsyncStorage.run(\n                finalClientPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={serverPhasedStream}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: finalClientController.signal,\n                  onError: (err: unknown, errorInfo: ErrorInfo) => {\n                    if (\n                      isPrerenderInterruptedError(err) ||\n                      finalClientController.signal.aborted\n                    ) {\n                      clientIsDynamic = true\n\n                      const componentStack: string | undefined = (\n                        errorInfo as any\n                      ).componentStack\n                      if (typeof componentStack === 'string') {\n                        trackAllowedDynamicAccess(\n                          workStore.route,\n                          componentStack,\n                          dynamicValidation,\n                          serverDynamicTracking,\n                          clientDynamicTracking\n                        )\n                      }\n                      return\n                    }\n\n                    return htmlRendererErrorHandler(err, errorInfo)\n                  },\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              ),\n            () => {\n              finalClientController.abort()\n              serverPhasedStream.assertExhausted()\n            }\n          )\n          htmlStream = result.prelude\n        } catch (err) {\n          if (\n            isPrerenderInterruptedError(err) ||\n            finalClientController.signal.aborted\n          ) {\n            // we don't have a root because the abort errored in the root. We can just ignore this error\n          } else {\n            // This error is something else and should bubble up\n            throw err\n          }\n        }\n\n        throwIfDisallowedDynamic(\n          workStore.route,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n\n        if (serverIsDynamic || clientIsDynamic) {\n          const dynamicReason = serverIsDynamic\n            ? getFirstDynamicReason(serverDynamicTracking)\n            : getFirstDynamicReason(clientDynamicTracking)\n          if (dynamicReason) {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/next-prerender-data`\n            )\n          } else {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically it accessed data without explicitly caching it. See more info here: https://nextjs.org/docs/messages/next-prerender-data`\n            )\n          }\n        }\n\n        // const reactServerResult =\n        //   await createReactServerPrerenderResultFromRender(reactServerStream!)\n\n        metadata.flightData = await streamToBuffer(\n          serverPrerenderStreamResult.asStream()\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        const validateRootLayout = renderOpts.dev\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueFizzStream(htmlStream!, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              serverPrerenderStreamResult.asStream(),\n              ctx.nonce,\n              formState\n            ),\n            isStaticGeneration: true,\n            getServerInsertedHTML,\n            serverInsertedHTMLToHead: true,\n            validateRootLayout,\n          }),\n          dynamicAccess: consumeDynamicAccess(\n            serverDynamicTracking,\n            clientDynamicTracking\n          ),\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: finalServerPrerenderStore.revalidate,\n          collectedExpire: finalServerPrerenderStore.expire,\n          collectedStale: finalServerPrerenderStore.stale,\n          collectedTags: finalServerPrerenderStore.tags,\n        }\n      }\n    } else if (renderOpts.experimental.isRoutePPREnabled) {\n      // We're statically generating with PPR and need to do dynamic tracking\n      let dynamicTracking = createDynamicTrackingState(\n        renderOpts.isDebugDynamicAccesses\n      )\n      const reactServerPrerenderStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      })\n      const RSCPayload = await workUnitAsyncStorage.run(\n        reactServerPrerenderStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            reactServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            // ... the arguments for the function to run\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const ssrPrerenderStore: PrerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      }\n      const prerender = require('react-dom/static.edge')\n        .prerender as (typeof import('react-dom/static.edge'))['prerender']\n      const { prelude, postponed } = await workUnitAsyncStorage.run(\n        ssrPrerenderStore,\n        prerender,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          onHeaders: (headers: Headers) => {\n            headers.forEach((value, key) => {\n              setHeader(key, value)\n            })\n          },\n          maxHeadersLength: renderOpts.reactMaxHeadersLength,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n\n      // After awaiting here we've waited for the entire RSC render to complete. Crucially this means\n      // that when we detect whether we've used dynamic APIs below we know we'll have picked up even\n      // parts of the React Server render that might not be used in the SSR render.\n      const flightData = await streamToBuffer(reactServerResult.asStream())\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = flightData\n      }\n\n      /**\n       * When prerendering there are three outcomes to consider\n       *\n       *   Dynamic HTML:      The prerender has dynamic holes (caused by using Next.js Dynamic Rendering APIs)\n       *                      We will need to resume this result when requests are handled and we don't include\n       *                      any server inserted HTML or inlined flight data in the static HTML\n       *\n       *   Dynamic Data:      The prerender has no dynamic holes but dynamic APIs were used. We will not\n       *                      resume this render when requests are handled but we will generate new inlined\n       *                      flight data since it is dynamic and differences may end up reconciling on the client\n       *\n       *   Static:            The prerender has no dynamic holes and no dynamic APIs were used. We statically encode\n       *                      all server inserted HTML and flight data\n       */\n      // First we check if we have any dynamic holes in our HTML prerender\n      if (accessedDynamicData(dynamicTracking.dynamicAccesses)) {\n        if (postponed != null) {\n          // Dynamic HTML case.\n          metadata.postponed = getDynamicHTMLPostponedState(\n            postponed,\n            fallbackRouteParams\n          )\n        } else {\n          // Dynamic Data case.\n          metadata.postponed = getDynamicDataPostponedState()\n        }\n        // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n        // server inserted html in the static response because the html that is part of the prerender may depend on it\n        // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n        // require the same set so we unify the code path here\n        reactServerResult.consume()\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n        // Rendering the fallback case.\n        metadata.postponed = getDynamicDataPostponedState()\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else {\n        // Static case\n        // We still have not used any dynamic APIs. At this point we can produce an entirely static prerender response\n        if (workStore.forceDynamic) {\n          throw new StaticGenBailoutError(\n            'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n          )\n        }\n\n        let htmlStream = prelude\n        if (postponed != null) {\n          // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n          // so we can set all the postponed boundaries to client render mode before we store the HTML response\n          const resume = require('react-dom/server.edge')\n            .resume as (typeof import('react-dom/server.edge'))['resume']\n\n          // We don't actually want to render anything so we just pass a stream\n          // that never resolves. The resume call is going to abort immediately anyway\n          const foreverStream = new ReadableStream<Uint8Array>()\n\n          const resumeStream = await resume(\n            <App\n              reactServerStream={foreverStream}\n              preinitScripts={() => {}}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            JSON.parse(JSON.stringify(postponed)),\n            {\n              signal: createPostponedAbortSignal('static prerender resume'),\n              onError: htmlRendererErrorHandler,\n              nonce: ctx.nonce,\n            }\n          )\n\n          // First we write everything from the prerender, then we write everything from the aborted resume render\n          htmlStream = chainStreams(prelude, resumeStream)\n        }\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueStaticPrerender(htmlStream, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              reactServerResult.consumeAsStream(),\n              ctx.nonce,\n              formState\n            ),\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      }\n    } else {\n      const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-legacy',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      })\n      // This is a regular static generation. We don't do dynamic tracking because we rely on\n      // the old-school dynamic error handling to bail out of static generation\n      const RSCPayload = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            prerenderLegacyStore,\n            ComponentMod.renderToReadableStream,\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const renderToReadableStream = require('react-dom/server.edge')\n        .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n      const htmlStream = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        renderToReadableStream,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          nonce: ctx.nonce,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n      }\n\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n      return {\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML,\n          serverInsertedHTMLToHead: true,\n        }),\n        // TODO: Should this include the SSR pass?\n        collectedRevalidate: prerenderLegacyStore.revalidate,\n        collectedExpire: prerenderLegacyStore.expire,\n        collectedStale: prerenderLegacyStore.stale,\n        collectedTags: prerenderLegacyStore.tags,\n      }\n    }\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If this is a static generation error, we need to throw it so that it\n    // can be handled by the caller if we're in static generation mode.\n    if (isDynamicServerError(err)) {\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    // If we errored when we did not have an RSC stream to read from. This is\n    // not just a render error, we need to throw early.\n    if (reactServerPrerenderResult === null) {\n      throw err\n    }\n\n    let errorType: 'not-found' | 'redirect' | undefined\n\n    if (isNotFoundError(err)) {\n      errorType = 'not-found'\n      res.statusCode = 404\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      // If there were mutable cookies set, we need to set them on the\n      // response.\n      const headers = new Headers()\n      if (appendMutableCookies(headers, ctx.requestStore.mutableCookies)) {\n        setHeader('set-cookie', Array.from(headers.values()))\n      }\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n      type: 'prerender-legacy',\n      phase: 'render',\n      implicitTags: ctx.requestStore.implicitTags,\n      revalidate: INFINITE_CACHE,\n      expire: INFINITE_CACHE,\n      stale: INFINITE_CACHE,\n      tags: [...ctx.requestStore.implicitTags],\n    })\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    try {\n      const fizzStream = await renderToInitialFizzStream({\n        ReactDOMServer: require('react-dom/server.edge'),\n        element: (\n          <AppWithoutContext\n            reactServerStream={errorServerStream}\n            preinitScripts={errorPreinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            nonce={ctx.nonce}\n          />\n        ),\n        streamOptions: {\n          nonce: ctx.nonce,\n          // Include hydration scripts in the HTML\n          bootstrapScripts: [errorBootstrapScript],\n          formState,\n        },\n      })\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = await streamToBuffer(\n          reactServerPrerenderResult.asStream()\n        )\n      }\n\n      const validateRootLayout = renderOpts.dev\n      return {\n        // Returning the error that was thrown so it can be used to handle\n        // the response in the caller.\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(fizzStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            // This is intentionally using the readable datastream from the\n            // main render rather than the flight data from the error page\n            // render\n            reactServerPrerenderResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML: makeGetServerInsertedHTML({\n            polyfills,\n            renderServerInsertedHTML,\n            serverCapturedErrors: [],\n            basePath: renderOpts.basePath,\n            tracingMetadata: tracingMetadata,\n          }),\n          serverInsertedHTMLToHead: true,\n          validateRootLayout,\n        }),\n        dynamicAccess: null,\n        collectedRevalidate:\n          prerenderStore !== null ? prerenderStore.revalidate : INFINITE_CACHE,\n        collectedExpire:\n          prerenderStore !== null ? prerenderStore.expire : INFINITE_CACHE,\n        collectedStale:\n          prerenderStore !== null ? prerenderStore.stale : INFINITE_CACHE,\n        collectedTags: prerenderStore !== null ? prerenderStore.tags : null,\n      }\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nconst loadingChunks: Set<Promise<unknown>> = new Set()\nconst chunkListeners: Array<(x?: unknown) => void> = []\n\nfunction trackChunkLoading(load: Promise<unknown>) {\n  loadingChunks.add(load)\n  load.finally(() => {\n    if (loadingChunks.has(load)) {\n      loadingChunks.delete(load)\n      if (loadingChunks.size === 0) {\n        // We are not currently loading any chunks. We can notify all listeners\n        for (let i = 0; i < chunkListeners.length; i++) {\n          chunkListeners[i]()\n        }\n        chunkListeners.length = 0\n      }\n    }\n  })\n}\n\nexport async function warmFlightResponse(\n  flightStream: ReadableStream<Uint8Array>,\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n) {\n  let createFromReadableStream\n  if (process.env.TURBOPACK) {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-turbopack/client.edge').createFromReadableStream\n  } else {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge').createFromReadableStream\n  }\n\n  try {\n    createFromReadableStream(flightStream, {\n      serverConsumerManifest: {\n        moduleLoading: clientReferenceManifest.moduleLoading,\n        moduleMap: clientReferenceManifest.ssrModuleMapping,\n        serverModuleMap: null,\n      },\n    })\n  } catch {\n    // We don't want to handle errors here but we don't want it to\n    // interrupt the outer flow. We simply ignore it here and expect\n    // it will bubble up during a render\n  }\n\n  // We'll wait at least one task and then if no chunks have started to load\n  // we'll we can infer that there are none to load from this flight response\n  trackChunkLoading(waitAtLeastOneReactRenderTask())\n  return new Promise((r) => {\n    chunkListeners.push(r)\n  })\n}\n\nconst getGlobalErrorStyles = async (\n  tree: LoaderTree,\n  ctx: AppRenderContext\n): Promise<React.ReactNode | undefined> => {\n  const {\n    modules: { 'global-error': globalErrorModule },\n  } = parseLoaderTree(tree)\n\n  let globalErrorStyles\n  if (globalErrorModule) {\n    const [, styles] = await createComponentStylesAndScripts({\n      ctx,\n      filePath: globalErrorModule[1],\n      getComponent: globalErrorModule[0],\n      injectedCSS: new Set(),\n      injectedJS: new Set(),\n    })\n    globalErrorStyles = styles\n  }\n\n  return globalErrorStyles\n}\n"],"names":["React","RenderResult","chainStreams","renderToInitialFizzStream","createDocumentClosingStream","continueFizzStream","continueDynamicPrerender","continueStaticPrerender","continueDynamicHTMLResume","streamToBuffer","streamToString","stripInternalQueries","NEXT_HMR_REFRESH_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_ROUTER_STALE_TIME_HEADER","NEXT_URL","RSC_HEADER","createTrackedMetadataContext","createMetadataContext","createRequestStoreForRender","withWorkStore","isNotFoundError","getURLFromRedirectError","isRedirectError","getRedirectStatusCodeFromError","getImplicitTags","AppRenderSpan","NextNodeServerSpan","getTracer","FlightRenderResult","createFlightReactServerErrorHandler","createHTMLReactServerErrorHandler","createHTMLErrorHandler","isUserLandError","getShortDynamicParamType","dynamicParamTypes","getSegmentParam","getScriptNonceFromHeader","parseAndValidateFlightRouterState","createFlightRouterStateFromLoaderTree","handleAction","isBailoutToCSRError","warn","error","appendMutableCookies","createServerInsertedHTML","getRequiredScripts","addPathPrefix","makeGetServerInsertedHTML","walkTreeWithFlightRouterState","createComponentTree","getAssetQueryString","setReferenceManifestsSingleton","DynamicState","parsePostponedState","getDynamicDataPostponedState","getDynamicHTMLPostponedState","getPostponedFromState","isDynamicServerError","useFlightStream","createInlinedDataReadableStream","StaticGenBailoutError","isStaticGenBailoutError","getStackWithoutErrorMessage","accessedDynamicData","createPostponedAbortSignal","formatDynamicAPIAccesses","isPrerenderInterruptedError","createDynamicTrackingState","createDynamicValidationState","getFirstDynamicReason","trackAllowedDynamicAccess","throwIfDisallowedDynamic","consumeDynamicAccess","getClientComponentLoaderMetrics","wrapClientComponentLoader","createServerModuleMap","isNodeNextRequest","parseParameter","parseRelativeUrl","AppRouter","getServerActionRequestMetadata","createInitialRouterState","createMutableActionQueue","getRevalidateReason","PAGE_SEGMENT_KEY","DynamicServerError","ReactServerResult","createReactServerPrerenderResult","createReactServerPrerenderResultFromRender","prerenderAndAbortInSequentialTasks","prerenderServerWithPhases","prerenderClientWithPhases","printDebugThrownValueForProspectiveRender","scheduleInSequentialTasks","waitAtLeastOneReactRenderTask","workUnitAsyncStorage","CacheSignal","getTracedMetadata","InvariantError","INFINITE_CACHE","createComponentStylesAndScripts","parseLoaderTree","flightDataPathHeadKey","parseRequestHeaders","headers","options","isDevWarmupRequest","isDevWarmup","isPrefetchRequest","toLowerCase","undefined","isHmrRefresh","isRSCRequest","shouldProvideFlightRouterState","isRoutePPREnabled","flightRouterState","csp","nonce","createNotFoundLoaderTree","loaderTree","components","children","page","makeGetDynamicParamFromSegment","params","pagePath","fallbackRouteParams","getDynamicParamFromSegment","segment","segmentParam","key","param","value","has","get","Array","isArray","map","i","encodeURIComponent","isCatchall","type","isOptionalCatchall","dynamicParamType","treeSegment","split","slice","flatMap","pathSegment","join","NonIndex","ctx","is404Page","isInvalidStatusCode","res","statusCode","meta","name","content","generateDynamicRSCPayload","requestStore","phase","flightData","componentMod","tree","createServerSearchParamsForMetadata","createServerParamsForMetadata","createMetadataComponents","MetadataBoundary","ViewportBoundary","appUsingSizeAdjustment","url","query","requestId","workStore","skipFlight","preloadCallbacks","searchParams","MetadataTree","getMetadataReady","metadataContext","pathname","renderOpts","createSegmentPath","child","loaderTreeToFilter","parentParams","isFirst","rscPayloadHead","Fragment","injectedCSS","Set","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","path","actionResult","a","f","b","buildId","S","isStaticGeneration","createErrorContext","renderSource","routerKind","routePath","routeType","isAction","revalidateReason","generateDynamicFlightRenderResult","req","onFlightDataRenderError","err","onInstrumentationRequestError","onError","dev","RSCPayload","process","env","NODE_ENV","experimental","dynamicIO","resolveValidation","validationOutlet","createValidationOutlet","_validation","spawnDynamicValidationInDev","clientReferenceManifest","route","flightReadableStream","renderToReadableStream","clientModules","temporaryReferences","fetchMetrics","warmupDevRender","rscPayload","reader","getReader","read","done","prepareInitialCanonicalUrl","search","getRSCPayload","is404","missingSlots","GlobalError","initialTree","errorType","seedData","firstItem","varyHeader","getHeader","couldBeIntercepted","includes","initialHead","globalErrorStyles","getGlobalErrorStyles","P","Preloads","p","assetPrefix","c","m","G","s","postponed","forEach","preloadFn","getErrorRSCPayload","initialSeedData","html","id","head","body","App","reactServerStream","preinitScripts","ServerInsertedHTMLProvider","response","use","initialState","initialFlightData","initialCanonicalUrlParts","initialParallelRoutes","location","prerendered","actionQueue","HeadManagerContext","require","Provider","appDir","globalErrorComponentAndStyles","AppWithoutContext","renderToHTMLOrFlightImpl","parsedRequestHeaders","requestEndedState","postponedState","isNotFoundPath","requestTimestamp","Date","now","serverActionsManifest","ComponentMod","nextFontManifest","serverActions","enableTainting","__next_app__","instrumented","globalThis","__next_require__","__next_chunk_load__","args","loadingChunk","loadChunk","trackChunkLoading","URL","setAppIsrStatus","NEXT_RUNTIME","originalRequest","on","prerenderStore","getStore","isPPR","dynamicTracking","dynamicAccesses","length","usedDynamic","forceDynamic","ended","metrics","reset","startSpan","clientComponentLoading","startTime","clientComponentLoadStart","attributes","clientComponentLoadCount","end","clientComponentLoadTimes","metadata","appUsingSizeAdjust","serverModuleMap","patchFetch","taintObjectReference","crypto","randomUUID","nanoid","isActionRequest","isServerAction","isPrefetch","setRootSpanAttribute","prerenderToStreamWithTracing","wrap","getBodyResult","spanName","prerenderToStream","dynamicAccess","isDebugDynamicAccesses","access","digestErrorsMap","size","buildFailingError","values","next","ssrErrors","find","pendingRevalidates","pendingRevalidateWrites","revalidatedTags","waitUntil","Promise","all","incrementalCache","revalidateTag","Object","collectedTags","fetchTags","staleHeader","String","collectedStale","setHeader","forceStatic","collectedRevalidate","revalidate","staticBailoutInfo","description","dynamicUsageDescription","stack","dynamicUsageStack","placeholder","Buffer","from","segmentFlightData","Map","stream","renderToStreamWithTracing","renderToStream","formState","actionRequestResult","generateFlight","notFoundLoaderTree","result","assignMetadata","renderToHTMLOrFlight","serverComponentsHmrCache","Error","implicitTags","routeModule","definition","onUpdateCookies","previewProps","run","workAsyncStorage","renderServerInsertedHTML","tracingMetadata","getTracePropagationData","clientTraceMetadata","polyfills","buildManifest","polyfillFiles","filter","polyfill","endsWith","src","integrity","subresourceIntegrityManifest","crossOrigin","noModule","bootstrapScript","reactServerErrorsByDigest","silenceLogger","onHTMLRenderRSCError","serverComponentsErrorHandler","nextExport","onHTMLRenderSSRError","allCapturedErrors","htmlRendererErrorHandler","reactServerResult","bind","prerenderPhase","environmentName","filterStackFrame","_functionName","startsWith","DATA","inlinedReactServerDataStream","tee","resume","htmlStream","getServerInsertedHTML","serverCapturedErrors","basePath","inlinedDataStream","consume","onHeaders","maxHeadersLength","reactMaxHeadersLength","bootstrapScripts","isDebugStaticShell","generateStaticHTML","supportsDynamicResponse","validateRootLayout","serverInsertedHTMLToHead","message","shouldBailoutToCSR","reason","redirectUrl","Headers","mutableCookies","errorPreinitScripts","errorBootstrapScript","errorRSCPayload","errorServerStream","fizzStream","ReactDOMServer","element","streamOptions","finalErr","bailOnNotFound","outlet","resolve","isNotFound","cacheSignal","firstAttemptServerController","AbortController","serverDynamicTracking","firstAttemptServerPrerenderStore","renderSignal","signal","controller","expire","stale","tags","validating","firstAttemptRSCPayload","cacheReady","abort","secondAttemptServerController","secondAttemptServerPrerenderStore","secondAttemptRSCPayload","asHaltedStream","warmupStream","renderStream","warmFlightResponse","prerender","clientDynamicTracking","dynamicValidation","firstAttemptClientController","firstAttemptClientPrerenderStore","firstAttemptReactServerStream","secondAttemptReactServerStream","hadException","errorInfo","aborted","componentStack","catch","__NEXT_VERBOSE_LOGGING","syncDynamicErrorWithStack","secondAttemptClientController","secondAttemptClientPrerenderStore","LogDynamicValidation","ReadableStream","start","errorStream","cancel","progressStream","enqueue","then","shouldGenerateStaticFlightData","reactServerPrerenderResult","initialServerPrerenderController","initialServerRenderController","initialServerPrerenderStore","initialServerPayload","pendingInitialServerResult","NEXT_DEBUG_BUILD","onPostpone","initialServerResult","asStream","initialClientController","initialClientPrerenderStore","asUnclosingStream","_errorInfo","serverIsDynamic","finalServerController","finalRenderPrerenderStore","finalAttemptRSCPayload","finalClientController","finalClientPrerenderStore","clientIsDynamic","prelude","collectedExpire","foreverStream","resumeStream","JSON","parse","stringify","consumeAsStream","cache","initialServerStream","pendingInitialClientResult","finalServerPrerenderStore","finalServerPayload","serverPrerenderStreamResult","digest","serverPhasedStream","asPhasedStream","assertExhausted","dynamicReason","reactServerPrerenderStore","ssrPrerenderStore","prerenderLegacyStore","loadingChunks","chunkListeners","load","add","finally","delete","flightStream","createFromReadableStream","TURBOPACK","serverConsumerManifest","moduleLoading","moduleMap","ssrModuleMapping","r","push","modules","globalErrorModule","styles","filePath","getComponent"],"mappings":"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"}