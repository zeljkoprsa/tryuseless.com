{"version":3,"sources":["../../../src/client/react-client-callbacks/shared.ts"],"sourcesContent":["// This module can be shared between both pages router and app router\n\nimport type { HydrationOptions } from 'react-dom/client'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { reportGlobalError } from './report-global-error'\nimport { getReactStitchedError } from '../components/react-dev-overlay/internal/helpers/stitched-error'\n\nexport const onRecoverableError: HydrationOptions['onRecoverableError'] = (\n  err,\n  errorInfo\n) => {\n  const stitchedError = getReactStitchedError(err)\n  // In development mode, pass along the component stack to the error\n  if (process.env.NODE_ENV === 'development' && errorInfo.componentStack) {\n    ;(stitchedError as any)._componentStack = errorInfo.componentStack\n  }\n  // Skip certain custom errors which are not expected to be reported on client\n  if (isBailoutToCSRError(err)) return\n\n  reportGlobalError(stitchedError)\n}\n"],"names":["isBailoutToCSRError","reportGlobalError","getReactStitchedError","onRecoverableError","err","errorInfo","stitchedError","process","env","NODE_ENV","componentStack","_componentStack"],"mappings":"AAAA,qEAAqE;AAGrE,SAASA,mBAAmB,QAAQ,+CAA8C;AAClF,SAASC,iBAAiB,QAAQ,wBAAuB;AACzD,SAASC,qBAAqB,QAAQ,kEAAiE;AAEvG,OAAO,MAAMC,qBAA6D,CACxEC,KACAC;IAEA,MAAMC,gBAAgBJ,sBAAsBE;IAC5C,mEAAmE;IACnE,IAAIG,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBAAiBJ,UAAUK,cAAc,EAAE;QACpEJ,cAAsBK,eAAe,GAAGN,UAAUK,cAAc;IACpE;IACA,6EAA6E;IAC7E,IAAIV,oBAAoBI,MAAM;IAE9BH,kBAAkBK;AACpB,EAAC"}