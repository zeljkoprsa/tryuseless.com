{"version":3,"sources":["../../../src/server/app-render/app-render.tsx"],"sourcesContent":["import type {\n  ActionResult,\n  DynamicParamTypesShort,\n  FlightRouterState,\n  FlightSegmentPath,\n  RenderOpts,\n  Segment,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n  RSCPayload,\n  FlightData,\n  InitialRSCPayload,\n} from './types'\nimport type { WorkStore } from '../app-render/work-async-storage.external'\nimport type { RequestStore } from '../app-render/work-unit-async-storage.external'\nimport type { NextParsedUrlQuery } from '../request-meta'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport type { AppPageModule } from '../route-modules/app-page/module'\nimport type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders } from 'http'\n\nimport React, { type ErrorInfo, type JSX } from 'react'\n\nimport RenderResult, {\n  type AppPageRenderResultMetadata,\n  type RenderResultOptions,\n} from '../render-result'\nimport {\n  chainStreams,\n  renderToInitialFizzStream,\n  createDocumentClosingStream,\n  continueFizzStream,\n  continueDynamicPrerender,\n  continueStaticPrerender,\n  continueDynamicHTMLResume,\n  streamToBuffer,\n  streamToString,\n} from '../stream-utils/node-web-streams-helper'\nimport { stripInternalQueries } from '../internal-utils'\nimport {\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_ROUTER_STALE_TIME_HEADER,\n  NEXT_URL,\n  RSC_HEADER,\n} from '../../client/components/app-router-headers'\nimport {\n  createTrackedMetadataContext,\n  createMetadataContext,\n} from '../../lib/metadata/metadata-context'\nimport { createRequestStoreForRender } from '../async-storage/request-store'\nimport { withWorkStore } from '../async-storage/with-work-store'\nimport { isNotFoundError } from '../../client/components/not-found'\nimport {\n  getURLFromRedirectError,\n  isRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { getImplicitTags } from '../lib/implicit-tags'\nimport { AppRenderSpan, NextNodeServerSpan } from '../lib/trace/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  createFlightReactServerErrorHandler,\n  createHTMLReactServerErrorHandler,\n  createHTMLErrorHandler,\n  type DigestedError,\n  isUserLandError,\n} from './create-error-handler'\nimport {\n  getShortDynamicParamType,\n  dynamicParamTypes,\n} from './get-short-dynamic-param-type'\nimport { getSegmentParam } from './get-segment-param'\nimport { getScriptNonceFromHeader } from './get-script-nonce-from-header'\nimport { parseAndValidateFlightRouterState } from './parse-and-validate-flight-router-state'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport { handleAction } from './action-handler'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { warn, error } from '../../build/output/log'\nimport { appendMutableCookies } from '../web/spec-extension/adapters/request-cookies'\nimport { createServerInsertedHTML } from './server-inserted-html'\nimport { getRequiredScripts } from './required-scripts'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport { makeGetServerInsertedHTML } from './make-get-server-inserted-html'\nimport { walkTreeWithFlightRouterState } from './walk-tree-with-flight-router-state'\nimport { createComponentTree } from './create-component-tree'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { setReferenceManifestsSingleton } from './encryption-utils'\nimport {\n  DynamicState,\n  type PostponedState,\n  parsePostponedState,\n} from './postponed-state'\nimport {\n  getDynamicDataPostponedState,\n  getDynamicHTMLPostponedState,\n  getPostponedFromState,\n} from './postponed-state'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  useFlightStream,\n  createInlinedDataReadableStream,\n} from './use-flight-response'\nimport {\n  StaticGenBailoutError,\n  isStaticGenBailoutError,\n} from '../../client/components/static-generation-bailout'\nimport { getStackWithoutErrorMessage } from '../../lib/format-server-error'\nimport {\n  accessedDynamicData,\n  createPostponedAbortSignal,\n  formatDynamicAPIAccesses,\n  isPrerenderInterruptedError,\n  createDynamicTrackingState,\n  createDynamicValidationState,\n  getFirstDynamicReason,\n  trackAllowedDynamicAccess,\n  throwIfDisallowedDynamic,\n  consumeDynamicAccess,\n  type DynamicAccess,\n} from './dynamic-rendering'\nimport {\n  getClientComponentLoaderMetrics,\n  wrapClientComponentLoader,\n} from '../client-component-renderer-logger'\nimport { createServerModuleMap } from './action-utils'\nimport { isNodeNextRequest } from '../base-http/helpers'\nimport { parseParameter } from '../../shared/lib/router/utils/route-regex'\nimport { parseRelativeUrl } from '../../shared/lib/router/utils/parse-relative-url'\nimport AppRouter from '../../client/components/app-router'\nimport type { ServerComponentsHmrCache } from '../response-cache'\nimport type { RequestErrorContext } from '../instrumentation/types'\nimport { getServerActionRequestMetadata } from '../lib/server-action-request-meta'\nimport { createInitialRouterState } from '../../client/components/router-reducer/create-initial-router-state'\nimport { createMutableActionQueue } from '../../shared/lib/router/action-queue'\nimport { getRevalidateReason } from '../instrumentation/utils'\nimport { PAGE_SEGMENT_KEY } from '../../shared/lib/segment'\nimport type { FallbackRouteParams } from '../request/fallback-params'\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  type ReactServerPrerenderResult,\n  ReactServerResult,\n  createReactServerPrerenderResult,\n  createReactServerPrerenderResultFromRender,\n  prerenderAndAbortInSequentialTasks,\n  prerenderServerWithPhases,\n  prerenderClientWithPhases,\n} from './app-render-prerender-utils'\nimport { printDebugThrownValueForProspectiveRender } from './prospective-render-utils'\nimport { scheduleInSequentialTasks } from './app-render-render-utils'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport {\n  workUnitAsyncStorage,\n  type PrerenderStore,\n} from './work-unit-async-storage.external'\nimport { CacheSignal } from './cache-signal'\nimport { getTracedMetadata } from '../lib/trace/utils'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nimport './clean-async-snapshot.external'\nimport { INFINITE_CACHE } from '../../lib/constants'\nimport { createComponentStylesAndScripts } from './create-component-styles-and-scripts'\nimport { parseLoaderTree } from './parse-loader-tree'\n\nexport type GetDynamicParamFromSegment = (\n  // [slug] / [[slug]] / [...slug]\n  segment: string\n) => {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null\n\nexport type GenerateFlight = typeof generateDynamicFlightRenderResult\n\nexport type AppRenderContext = {\n  workStore: WorkStore\n  requestStore: RequestStore\n  componentMod: AppPageModule\n  renderOpts: RenderOpts\n  parsedRequestHeaders: ParsedRequestHeaders\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  query: NextParsedUrlQuery\n  isPrefetch: boolean\n  isAction: boolean\n  requestTimestamp: number\n  appUsingSizeAdjustment: boolean\n  flightRouterState?: FlightRouterState\n  requestId: string\n  pagePath: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  assetPrefix: string\n  isNotFoundPath: boolean\n  nonce: string | undefined\n  res: BaseNextResponse\n}\n\ninterface ParseRequestHeadersOptions {\n  readonly isDevWarmup: undefined | boolean\n  readonly isRoutePPREnabled: boolean\n}\n\nconst flightDataPathHeadKey = 'h'\n\ninterface ParsedRequestHeaders {\n  /**\n   * Router state provided from the client-side router. Used to handle rendering\n   * from the common layout down. This value will be undefined if the request is\n   * not a client-side navigation request, or if the request is a prefetch\n   * request.\n   */\n  readonly flightRouterState: FlightRouterState | undefined\n  readonly isPrefetchRequest: boolean\n  readonly isDevWarmupRequest: boolean\n  readonly isHmrRefresh: boolean\n  readonly isRSCRequest: boolean\n  readonly nonce: string | undefined\n}\n\nfunction parseRequestHeaders(\n  headers: IncomingHttpHeaders,\n  options: ParseRequestHeadersOptions\n): ParsedRequestHeaders {\n  const isDevWarmupRequest = options.isDevWarmup === true\n\n  // dev warmup requests are treated as prefetch RSC requests\n  const isPrefetchRequest =\n    isDevWarmupRequest ||\n    headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] !== undefined\n\n  const isHmrRefresh =\n    headers[NEXT_HMR_REFRESH_HEADER.toLowerCase()] !== undefined\n\n  // dev warmup requests are treated as prefetch RSC requests\n  const isRSCRequest =\n    isDevWarmupRequest || headers[RSC_HEADER.toLowerCase()] !== undefined\n\n  const shouldProvideFlightRouterState =\n    isRSCRequest && (!isPrefetchRequest || !options.isRoutePPREnabled)\n\n  const flightRouterState = shouldProvideFlightRouterState\n    ? parseAndValidateFlightRouterState(\n        headers[NEXT_ROUTER_STATE_TREE_HEADER.toLowerCase()]\n      )\n    : undefined\n\n  const csp =\n    headers['content-security-policy'] ||\n    headers['content-security-policy-report-only']\n\n  const nonce =\n    typeof csp === 'string' ? getScriptNonceFromHeader(csp) : undefined\n\n  return {\n    flightRouterState,\n    isPrefetchRequest,\n    isHmrRefresh,\n    isRSCRequest,\n    isDevWarmupRequest,\n    nonce,\n  }\n}\n\nfunction createNotFoundLoaderTree(loaderTree: LoaderTree): LoaderTree {\n  // Align the segment with parallel-route-default in next-app-loader\n  const components = loaderTree[2]\n  return [\n    '',\n    {\n      children: [\n        PAGE_SEGMENT_KEY,\n        {},\n        {\n          page: components['not-found'],\n        },\n      ],\n    },\n    components,\n  ]\n}\n\nexport type CreateSegmentPath = (child: FlightSegmentPath) => FlightSegmentPath\n\n/**\n * Returns a function that parses the dynamic segment and return the associated value.\n */\nfunction makeGetDynamicParamFromSegment(\n  params: { [key: string]: any },\n  pagePath: string,\n  fallbackRouteParams: FallbackRouteParams | null\n): GetDynamicParamFromSegment {\n  return function getDynamicParamFromSegment(\n    // [slug] / [[slug]] / [...slug]\n    segment: string\n  ) {\n    const segmentParam = getSegmentParam(segment)\n    if (!segmentParam) {\n      return null\n    }\n\n    const key = segmentParam.param\n\n    let value = params[key]\n\n    if (fallbackRouteParams && fallbackRouteParams.has(segmentParam.param)) {\n      value = fallbackRouteParams.get(segmentParam.param)\n    } else if (Array.isArray(value)) {\n      value = value.map((i) => encodeURIComponent(i))\n    } else if (typeof value === 'string') {\n      value = encodeURIComponent(value)\n    }\n\n    if (!value) {\n      const isCatchall = segmentParam.type === 'catchall'\n      const isOptionalCatchall = segmentParam.type === 'optional-catchall'\n\n      if (isCatchall || isOptionalCatchall) {\n        const dynamicParamType = dynamicParamTypes[segmentParam.type]\n        // handle the case where an optional catchall does not have a value,\n        // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n        if (isOptionalCatchall) {\n          return {\n            param: key,\n            value: null,\n            type: dynamicParamType,\n            treeSegment: [key, '', dynamicParamType],\n          }\n        }\n\n        // handle the case where a catchall or optional catchall does not have a value,\n        // e.g. `/foo/bar/hello` and `@slot/[...catchall]` or `@slot/[[...catchall]]` is matched\n        value = pagePath\n          .split('/')\n          // remove the first empty string\n          .slice(1)\n          // replace any dynamic params with the actual values\n          .flatMap((pathSegment) => {\n            const param = parseParameter(pathSegment)\n            // if the segment matches a param, return the param value\n            // otherwise, it's a static segment, so just return that\n            return params[param.key] ?? param.key\n          })\n\n        return {\n          param: key,\n          value,\n          type: dynamicParamType,\n          // This value always has to be a string.\n          treeSegment: [key, value.join('/'), dynamicParamType],\n        }\n      }\n    }\n\n    const type = getShortDynamicParamType(segmentParam.type)\n\n    return {\n      param: key,\n      // The value that is passed to user code.\n      value: value,\n      // The value that is rendered in the router tree.\n      treeSegment: [key, Array.isArray(value) ? value.join('/') : value, type],\n      type: type,\n    }\n  }\n}\n\nfunction NonIndex({ ctx }: { ctx: AppRenderContext }) {\n  const is404Page = ctx.pagePath === '/404'\n  const isInvalidStatusCode =\n    typeof ctx.res.statusCode === 'number' && ctx.res.statusCode > 400\n\n  if (is404Page || isInvalidStatusCode) {\n    return <meta name=\"robots\" content=\"noindex\" />\n  }\n  return null\n}\n\n/**\n * This is used by server actions & client-side navigations to generate RSC data from a client-side request.\n * This function is only called on \"dynamic\" requests (ie, there wasn't already a static response).\n * It uses request headers (namely `Next-Router-State-Tree`) to determine where to start rendering.\n */\nasync function generateDynamicRSCPayload(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n  }\n): Promise<RSCPayload> {\n  ctx.requestStore.phase = 'render'\n  // Flight data that is going to be passed to the browser.\n  // Currently a single item array but in the future multiple patches might be combined in a single request.\n\n  // We initialize `flightData` to an empty string because the client router knows how to tolerate\n  // it (treating it as an MPA navigation). The only time this function wouldn't generate flight data\n  // is for server actions, if the server action handler instructs this function to skip it. When the server\n  // action reducer sees a falsy value, it'll simply resolve the action with no data.\n  let flightData: FlightData = ''\n\n  const {\n    componentMod: {\n      tree: loaderTree,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    requestStore: { url },\n    query,\n    requestId,\n    flightRouterState,\n    workStore,\n  } = ctx\n\n  if (!options?.skipFlight) {\n    const preloadCallbacks: PreloadCallbacks = []\n\n    const searchParams = createServerSearchParamsForMetadata(query, workStore)\n    const [MetadataTree, getMetadataReady] = createMetadataComponents({\n      tree: loaderTree,\n      searchParams,\n      metadataContext: createTrackedMetadataContext(\n        url.pathname,\n        ctx.renderOpts,\n        workStore\n      ),\n      getDynamicParamFromSegment,\n      appUsingSizeAdjustment,\n      createServerParamsForMetadata,\n      workStore,\n      MetadataBoundary,\n      ViewportBoundary,\n    })\n    flightData = (\n      await walkTreeWithFlightRouterState({\n        ctx,\n        createSegmentPath: (child) => child,\n        loaderTreeToFilter: loaderTree,\n        parentParams: {},\n        flightRouterState,\n        isFirst: true,\n        // For flight, render metadata inside leaf page\n        rscPayloadHead: (\n          <React.Fragment key={flightDataPathHeadKey}>\n            <NonIndex ctx={ctx} />\n            {/* Adding requestId as react key to make metadata remount for each render */}\n            <MetadataTree key={requestId} />\n          </React.Fragment>\n        ),\n        injectedCSS: new Set(),\n        injectedJS: new Set(),\n        injectedFontPreloadTags: new Set(),\n        rootLayoutIncluded: false,\n        getMetadataReady,\n        preloadCallbacks,\n      })\n    ).map((path) => path.slice(1)) // remove the '' (root) segment\n  }\n\n  // If we have an action result, then this is a server action response.\n  // We can rely on this because `ActionResult` will always be a promise, even if\n  // the result is falsey.\n  if (options?.actionResult) {\n    return {\n      a: options.actionResult,\n      f: flightData,\n      b: ctx.renderOpts.buildId,\n    }\n  }\n\n  // Otherwise, it's a regular RSC response.\n  return {\n    b: ctx.renderOpts.buildId,\n    f: flightData,\n    S: workStore.isStaticGeneration,\n  }\n}\n\nfunction createErrorContext(\n  ctx: AppRenderContext,\n  renderSource: RequestErrorContext['renderSource']\n): RequestErrorContext {\n  return {\n    routerKind: 'App Router',\n    routePath: ctx.pagePath,\n    routeType: ctx.isAction ? 'action' : 'render',\n    renderSource,\n    revalidateReason: getRevalidateReason(ctx.workStore),\n  }\n}\n/**\n * Produces a RenderResult containing the Flight data for the given request. See\n * `generateDynamicRSCPayload` for information on the contents of the render result.\n */\nasync function generateDynamicFlightRenderResult(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n    temporaryReferences?: WeakMap<any, string>\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    !!renderOpts.dev,\n    onFlightDataRenderError\n  )\n\n  const RSCPayload: RSCPayload & {\n    /** Only available during dynamicIO development builds. Used for logging errors. */\n    _validation?: Promise<React.ReactNode>\n  } = await generateDynamicRSCPayload(ctx, options)\n\n  if (\n    // We only want this behavior when running `next dev`\n    renderOpts.dev &&\n    // We only want this behavior when we have React's dev builds available\n    process.env.NODE_ENV === 'development' &&\n    // We only have a Prerender environment for projects opted into dynamicIO\n    renderOpts.experimental.dynamicIO\n  ) {\n    const [resolveValidation, validationOutlet] = createValidationOutlet()\n    RSCPayload._validation = validationOutlet\n\n    spawnDynamicValidationInDev(\n      resolveValidation,\n      ctx.componentMod.tree,\n      ctx,\n      false,\n      ctx.clientReferenceManifest,\n      ctx.workStore.route\n    )\n  }\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = ctx.componentMod.renderToReadableStream(\n    RSCPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n      temporaryReferences: options?.temporaryReferences,\n    }\n  )\n\n  return new FlightRenderResult(flightReadableStream, {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n  })\n}\n\n/**\n * Performs a \"warmup\" render of the RSC payload for a given route. This function is called by the server\n * prior to an actual render request in Dev mode only. It's purpose is to fill caches so the actual render\n * can accurately log activity in the right render context (Prerender vs Render).\n *\n * At the moment this implementation is mostly a fork of generateDynamicFlightRenderResult\n */\nasync function warmupDevRender(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n  if (!renderOpts.dev) {\n    throw new InvariantError(\n      'generateDynamicFlightRenderResult should never be called in `next start` mode.'\n    )\n  }\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    true,\n    onFlightDataRenderError\n  )\n\n  const rscPayload = await generateDynamicRSCPayload(ctx, options)\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = ctx.componentMod.renderToReadableStream(\n    rscPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n    }\n  )\n\n  const reader = flightReadableStream.getReader()\n  while (true) {\n    if ((await reader.read()).done) {\n      break\n    }\n  }\n\n  // We don't really want to return a result here but the stack of functions\n  // that calls into renderToHTML... expects a result. We should refactor this to\n  // lift the warmup pathway outside of renderToHTML... but for now this suffices\n  return new FlightRenderResult('', {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n  })\n}\n\n/**\n * Crawlers will inadvertently think the canonicalUrl in the RSC payload should be crawled\n * when our intention is to just seed the router state with the current URL.\n * This function splits up the pathname so that we can later join it on\n * when we're ready to consume the path.\n */\nfunction prepareInitialCanonicalUrl(url: RequestStore['url']) {\n  return (url.pathname + url.search).split('/')\n}\n\n// This is the data necessary to render <AppRouter /> when no SSR errors are encountered\nasync function getRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  is404: boolean\n): Promise<InitialRSCPayload & { P: React.ReactNode }> {\n  const injectedCSS = new Set<string>()\n  const injectedJS = new Set<string>()\n  const injectedFontPreloadTags = new Set<string>()\n  let missingSlots: Set<string> | undefined\n\n  // We only track missing parallel slots in development\n  if (process.env.NODE_ENV === 'development') {\n    missingSlots = new Set<string>()\n  }\n\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    requestStore: { url },\n    workStore,\n  } = ctx\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree, getMetadataReady] = createMetadataComponents({\n    tree,\n    errorType: is404 ? 'not-found' : undefined,\n    searchParams,\n    metadataContext: createTrackedMetadataContext(\n      url.pathname,\n      ctx.renderOpts,\n      workStore\n    ),\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const preloadCallbacks: PreloadCallbacks = []\n\n  const seedData = await createComponentTree({\n    ctx,\n    createSegmentPath: (child) => child,\n    loaderTree: tree,\n    parentParams: {},\n    firstItem: true,\n    injectedCSS,\n    injectedJS,\n    injectedFontPreloadTags,\n    rootLayoutIncluded: false,\n    getMetadataReady,\n    missingSlots,\n    preloadCallbacks,\n  })\n\n  // When the `vary` response header is present with `Next-URL`, that means there's a chance\n  // it could respond differently if there's an interception route. We provide this information\n  // to `AppRouter` so that it can properly seed the prefetch cache with a prefix, if needed.\n  const varyHeader = ctx.res.getHeader('vary')\n  const couldBeIntercepted =\n    typeof varyHeader === 'string' && varyHeader.includes(NEXT_URL)\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={ctx.requestId} />\n    </React.Fragment>\n  )\n\n  const globalErrorStyles = await getGlobalErrorStyles(tree, ctx)\n\n  return {\n    // See the comment above the `Preloads` component (below) for why this is part of the payload\n    P: <Preloads preloadCallbacks={preloadCallbacks} />,\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    i: !!couldBeIntercepted,\n    f: [[initialTree, seedData, initialHead]],\n    m: missingSlots,\n    G: [GlobalError, globalErrorStyles],\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  }\n}\n\n/**\n * Preload calls (such as `ReactDOM.preloadStyle` and `ReactDOM.preloadFont`) need to be called during rendering\n * in order to create the appropriate preload tags in the DOM, otherwise they're a no-op. Since we invoke\n * renderToReadableStream with a function that returns component props rather than a component itself, we use\n * this component to \"render  \" the preload calls.\n */\nfunction Preloads({ preloadCallbacks }: { preloadCallbacks: Function[] }) {\n  preloadCallbacks.forEach((preloadFn) => preloadFn())\n  return null\n}\n\n// This is the data necessary to render <AppRouter /> when an error state is triggered\nasync function getErrorRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  errorType: 'not-found' | 'redirect' | undefined\n) {\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    requestStore: { url },\n    requestId,\n    workStore,\n  } = ctx\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree] = createMetadataComponents({\n    tree,\n    searchParams,\n    // We create an untracked metadata context here because we can't postpone\n    // again during the error render.\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    errorType,\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={requestId} />\n      {process.env.NODE_ENV === 'development' && (\n        <meta name=\"next-error\" content=\"not-found\" />\n      )}\n    </React.Fragment>\n  )\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  // For metadata notFound error there's no global not found boundary on top\n  // so we create a not found page with AppRouter\n  const initialSeedData: CacheNodeSeedData = [\n    initialTree[0],\n    <html id=\"__next_error__\">\n      <head></head>\n      <body></body>\n    </html>,\n    {},\n    null,\n  ]\n\n  const globalErrorStyles = await getGlobalErrorStyles(tree, ctx)\n\n  return {\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    m: undefined,\n    i: false,\n    f: [[initialTree, initialSeedData, initialHead]],\n    G: [GlobalError, globalErrorStyles],\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  } satisfies InitialRSCPayload\n}\n\n// This component must run in an SSR context. It will render the RSC root component\nfunction App<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n  ServerInsertedHTMLProvider,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  ServerInsertedHTMLProvider: React.ComponentType<{ children: JSX.Element }>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  const { HeadManagerContext } =\n    require('../../shared/lib/head-manager-context.shared-runtime') as typeof import('../../shared/lib/head-manager-context.shared-runtime')\n\n  return (\n    <HeadManagerContext.Provider\n      value={{\n        appDir: true,\n        nonce,\n      }}\n    >\n      <ServerInsertedHTMLProvider>\n        <AppRouter\n          actionQueue={actionQueue}\n          globalErrorComponentAndStyles={response.G}\n          assetPrefix={response.p}\n        />\n      </ServerInsertedHTMLProvider>\n    </HeadManagerContext.Provider>\n  )\n}\n\n// @TODO our error stream should be probably just use the same root component. But it was previously\n// different I don't want to figure out if that is meaningful at this time so just keeping the behavior\n// consistent for now.\nfunction AppWithoutContext<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  return (\n    <AppRouter\n      actionQueue={actionQueue}\n      globalErrorComponentAndStyles={response.G}\n      assetPrefix={response.p}\n    />\n  )\n}\n\n// We use a trick with TS Generics to branch streams with a type so we can\n// consume the parsed value of a Readable Stream if it was constructed with a\n// certain object shape. The generic type is not used directly in the type so it\n// requires a disabling of the eslint rule disallowing unused vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>\n\nasync function renderToHTMLOrFlightImpl(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  requestStore: RequestStore,\n  workStore: WorkStore,\n  parsedRequestHeaders: ParsedRequestHeaders,\n  requestEndedState: { ended?: boolean },\n  postponedState: PostponedState | null\n) {\n  const isNotFoundPath = pagePath === '/404'\n  if (isNotFoundPath) {\n    res.statusCode = 404\n  }\n\n  // A unique request timestamp used by development to ensure that it's\n  // consistent and won't change during this request. This is important to\n  // avoid that resources can be deduped by React Float if the same resource is\n  // rendered or preloaded multiple times: `<link href=\"a.css?v={Date.now()}\"/>`.\n  const requestTimestamp = Date.now()\n\n  const {\n    serverActionsManifest,\n    ComponentMod,\n    nextFontManifest,\n    serverActions,\n    assetPrefix = '',\n    enableTainting,\n  } = renderOpts\n\n  // We need to expose the bundled `require` API globally for\n  // react-server-dom-webpack. This is a hack until we find a better way.\n  if (ComponentMod.__next_app__) {\n    const instrumented = wrapClientComponentLoader(ComponentMod)\n    // @ts-ignore\n    globalThis.__next_require__ = instrumented.require\n    // When we are prerendering if there is a cacheSignal for tracking\n    // cache reads we wrap the loadChunk in this tracking. This allows us\n    // to treat chunk loading with similar semantics as cache reads to avoid\n    // async loading chunks from causing a prerender to abort too early.\n    // @ts-ignore\n    globalThis.__next_chunk_load__ = (...args: Array<any>) => {\n      const loadingChunk = instrumented.loadChunk(...args)\n      trackChunkLoading(loadingChunk)\n      return loadingChunk\n    }\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // reset isr status at start of request\n    const { pathname } = new URL(req.url || '/', 'http://n')\n    renderOpts.setAppIsrStatus?.(pathname, null)\n  }\n\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextRequest(req)\n  ) {\n    req.originalRequest.on('end', () => {\n      const prerenderStore = workUnitAsyncStorage.getStore()\n      const isPPR =\n        prerenderStore &&\n        (prerenderStore.type === 'prerender' ||\n          prerenderStore.type === 'prerender-ppr')\n          ? !!prerenderStore.dynamicTracking?.dynamicAccesses?.length\n          : false\n\n      if (\n        process.env.NODE_ENV === 'development' &&\n        renderOpts.setAppIsrStatus &&\n        !isPPR &&\n        !requestStore.usedDynamic &&\n        !workStore.forceDynamic\n      ) {\n        // only node can be ISR so we only need to update the status here\n        const { pathname } = new URL(req.url || '/', 'http://n')\n        renderOpts.setAppIsrStatus(pathname, true)\n      }\n\n      requestEndedState.ended = true\n\n      if ('performance' in globalThis) {\n        const metrics = getClientComponentLoaderMetrics({ reset: true })\n        if (metrics) {\n          getTracer()\n            .startSpan(NextNodeServerSpan.clientComponentLoading, {\n              startTime: metrics.clientComponentLoadStart,\n              attributes: {\n                'next.clientComponentLoadCount':\n                  metrics.clientComponentLoadCount,\n                'next.span_type': NextNodeServerSpan.clientComponentLoading,\n              },\n            })\n            .end(\n              metrics.clientComponentLoadStart +\n                metrics.clientComponentLoadTimes\n            )\n        }\n      }\n    })\n  }\n\n  const metadata: AppPageRenderResultMetadata = {}\n\n  const appUsingSizeAdjustment = !!nextFontManifest?.appUsingSizeAdjust\n\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const serverModuleMap = createServerModuleMap({ serverActionsManifest })\n\n  setReferenceManifestsSingleton({\n    page: workStore.page,\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  })\n\n  ComponentMod.patchFetch()\n\n  // Pull out the hooks/references from the component.\n  const { tree: loaderTree, taintObjectReference } = ComponentMod\n\n  if (enableTainting) {\n    taintObjectReference(\n      'Do not pass process.env to client components since it will leak sensitive data',\n      process.env\n    )\n  }\n\n  workStore.fetchMetrics = []\n  metadata.fetchMetrics = workStore.fetchMetrics\n\n  // don't modify original query object\n  query = { ...query }\n  stripInternalQueries(query)\n\n  const {\n    flightRouterState,\n    isPrefetchRequest,\n    isRSCRequest,\n    isDevWarmupRequest,\n    nonce,\n  } = parsedRequestHeaders\n\n  /**\n   * The metadata items array created in next-app-loader with all relevant information\n   * that we need to resolve the final metadata.\n   */\n  let requestId: string\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    requestId = crypto.randomUUID()\n  } else {\n    requestId = require('next/dist/compiled/nanoid').nanoid()\n  }\n\n  /**\n   * Dynamic parameters. E.g. when you visit `/dashboard/vercel` which is rendered by `/dashboard/[slug]` the value will be {\"slug\": \"vercel\"}.\n   */\n  const params = renderOpts.params ?? {}\n\n  const { isStaticGeneration, fallbackRouteParams } = workStore\n\n  const getDynamicParamFromSegment = makeGetDynamicParamFromSegment(\n    params,\n    pagePath,\n    fallbackRouteParams\n  )\n\n  const isActionRequest = getServerActionRequestMetadata(req).isServerAction\n\n  const ctx: AppRenderContext = {\n    componentMod: ComponentMod,\n    renderOpts,\n    requestStore,\n    workStore,\n    parsedRequestHeaders,\n    getDynamicParamFromSegment,\n    query,\n    isPrefetch: isPrefetchRequest,\n    isAction: isActionRequest,\n    requestTimestamp,\n    appUsingSizeAdjustment,\n    flightRouterState,\n    requestId,\n    pagePath,\n    clientReferenceManifest,\n    assetPrefix,\n    isNotFoundPath,\n    nonce,\n    res,\n  }\n\n  getTracer().setRootSpanAttribute('next.route', pagePath)\n\n  if (isStaticGeneration) {\n    // We're either building or revalidating. In either case we need to\n    // prerender our page rather than render it.\n    const prerenderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `prerender route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      prerenderToStream\n    )\n\n    const response = await prerenderToStreamWithTracing(\n      req,\n      res,\n      ctx,\n      metadata,\n      workStore,\n      loaderTree\n    )\n\n    // If we're debugging partial prerendering, print all the dynamic API accesses\n    // that occurred during the render.\n    // @TODO move into renderToStream function\n    if (\n      response.dynamicAccess &&\n      accessedDynamicData(response.dynamicAccess) &&\n      renderOpts.isDebugDynamicAccesses\n    ) {\n      warn('The following dynamic usage was detected:')\n      for (const access of formatDynamicAPIAccesses(response.dynamicAccess)) {\n        warn(access)\n      }\n    }\n\n    // If we encountered any unexpected errors during build we fail the\n    // prerendering phase and the build.\n    if (response.digestErrorsMap.size) {\n      const buildFailingError = response.digestErrorsMap.values().next().value\n      if (buildFailingError) throw buildFailingError\n    }\n    // Pick first userland SSR error, which is also not a RSC error.\n    if (response.ssrErrors.length) {\n      const buildFailingError = response.ssrErrors.find((err) =>\n        isUserLandError(err)\n      )\n      if (buildFailingError) throw buildFailingError\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    if (response.collectedTags) {\n      metadata.fetchTags = response.collectedTags.join(',')\n    }\n\n    // Let the client router know how long to keep the cached entry around.\n    const staleHeader = String(response.collectedStale)\n    res.setHeader(NEXT_ROUTER_STALE_TIME_HEADER, staleHeader)\n    metadata.headers ??= {}\n    metadata.headers[NEXT_ROUTER_STALE_TIME_HEADER] = staleHeader\n\n    // If force static is specifically set to false, we should not revalidate\n    // the page.\n    if (workStore.forceStatic === false || response.collectedRevalidate === 0) {\n      metadata.revalidate = 0\n    } else {\n      // Copy the revalidation value onto the render result metadata.\n      metadata.revalidate =\n        response.collectedRevalidate >= INFINITE_CACHE\n          ? false\n          : response.collectedRevalidate\n    }\n\n    // provide bailout info for debugging\n    if (metadata.revalidate === 0) {\n      metadata.staticBailoutInfo = {\n        description: workStore.dynamicUsageDescription,\n        stack: workStore.dynamicUsageStack,\n      }\n    }\n\n    // Per-segment prefetch data\n    //\n    // All of the segments for a page are generated simultaneously, including\n    // during revalidations. This is to ensure consistency, because it's\n    // possible for a mismatch between a layout and page segment can cause the\n    // client to error during rendering. We want to preserve the ability of the\n    // client to recover from such a mismatch by re-requesting all the segments\n    // to get a consistent view of the page.\n    //\n    // TODO (Per Segment Prefetching): This is placeholder data. Populate with\n    // the actual data generated during prerender.\n    if (renderOpts.experimental.isRoutePPREnabled === true) {\n      const placeholder = Buffer.from(\n        'TODO (Per Segment Prefetching): Not yet implemented\\n'\n      )\n      metadata.segmentFlightData = new Map([\n        // Root segment\n        ['/', placeholder],\n        ['/blog', placeholder],\n        // TODO: Update the client to use the same encoding for segment paths that\n        // we use here, so we don't have to convert between them. Needs to be\n        // filesystem safe.\n        ['/blog/[post]-1-d', placeholder],\n      ])\n    }\n\n    return new RenderResult(await streamToString(response.stream), options)\n  } else {\n    // We're rendering dynamically\n    if (isDevWarmupRequest) {\n      return warmupDevRender(req, ctx)\n    } else if (isRSCRequest) {\n      return generateDynamicFlightRenderResult(req, ctx)\n    }\n\n    const renderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `render route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      renderToStream\n    )\n\n    let formState: null | any = null\n    if (isActionRequest) {\n      // For action requests, we handle them differently with a special render result.\n      const actionRequestResult = await handleAction({\n        req,\n        res,\n        ComponentMod,\n        serverModuleMap,\n        generateFlight: generateDynamicFlightRenderResult,\n        workStore,\n        requestStore,\n        serverActions,\n        ctx,\n      })\n\n      if (actionRequestResult) {\n        if (actionRequestResult.type === 'not-found') {\n          const notFoundLoaderTree = createNotFoundLoaderTree(loaderTree)\n          res.statusCode = 404\n          const stream = await renderToStreamWithTracing(\n            requestStore,\n            req,\n            res,\n            ctx,\n            workStore,\n            notFoundLoaderTree,\n            formState,\n            postponedState\n          )\n\n          return new RenderResult(stream, { metadata })\n        } else if (actionRequestResult.type === 'done') {\n          if (actionRequestResult.result) {\n            actionRequestResult.result.assignMetadata(metadata)\n            return actionRequestResult.result\n          } else if (actionRequestResult.formState) {\n            formState = actionRequestResult.formState\n          }\n        }\n      }\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n\n    const stream = await renderToStreamWithTracing(\n      requestStore,\n      req,\n      res,\n      ctx,\n      workStore,\n      loaderTree,\n      formState,\n      postponedState\n    )\n\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    // Create the new render result for the response.\n    return new RenderResult(stream, options)\n  }\n}\n\nexport type AppPageRender = (\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  fallbackRouteParams: FallbackRouteParams | null,\n  renderOpts: RenderOpts,\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n) => Promise<RenderResult<AppPageRenderResultMetadata>>\n\nexport const renderToHTMLOrFlight: AppPageRender = (\n  req,\n  res,\n  pagePath,\n  query,\n  fallbackRouteParams,\n  renderOpts,\n  serverComponentsHmrCache\n) => {\n  if (!req.url) {\n    throw new Error('Invalid URL')\n  }\n\n  const url = parseRelativeUrl(req.url, undefined, false)\n\n  // We read these values from the request object as, in certain cases,\n  // base-server will strip them to opt into different rendering behavior.\n  const parsedRequestHeaders = parseRequestHeaders(req.headers, {\n    isDevWarmup: renderOpts.isDevWarmup,\n    isRoutePPREnabled: renderOpts.experimental.isRoutePPREnabled === true,\n  })\n\n  const { isHmrRefresh, isPrefetchRequest } = parsedRequestHeaders\n\n  const requestEndedState = { ended: false }\n  let postponedState: PostponedState | null = null\n\n  // If provided, the postpone state should be parsed so it can be provided to\n  // React.\n  if (typeof renderOpts.postponed === 'string') {\n    if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n      throw new Error(\n        'Invariant: postponed state should not be provided when fallback params are provided'\n      )\n    }\n\n    postponedState = parsePostponedState(\n      renderOpts.postponed,\n      renderOpts.params\n    )\n  }\n\n  const implicitTags = getImplicitTags(\n    renderOpts.routeModule.definition.page,\n    url,\n    fallbackRouteParams\n  )\n  // TODO: We need to refactor this so that prerenders do not rely upon the\n  // existence of an outer scoped request store. Then we should move this\n  // store generation inside the appropriate scope like `renderToStream` where\n  // we know we're handling a Request and not a Prerender\n  const requestStore = createRequestStoreForRender(\n    req,\n    res,\n    url,\n    implicitTags,\n    renderOpts.onUpdateCookies,\n    renderOpts.previewProps,\n    isHmrRefresh,\n    serverComponentsHmrCache\n  )\n  return workUnitAsyncStorage.run(requestStore, () => {\n    return withWorkStore(\n      renderOpts.ComponentMod.workAsyncStorage,\n      {\n        page: renderOpts.routeModule.definition.page,\n        fallbackRouteParams,\n        renderOpts,\n        requestEndedState,\n        // @TODO move to workUnitStore of type Request\n        isPrefetchRequest,\n      },\n      (workStore) =>\n        renderToHTMLOrFlightImpl(\n          req,\n          res,\n          pagePath,\n          query,\n          renderOpts,\n          requestStore,\n          workStore,\n          parsedRequestHeaders,\n          requestEndedState,\n          postponedState\n        )\n    )\n  })\n}\n\nasync function renderToStream(\n  requestStore: RequestStore,\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  workStore: WorkStore,\n  tree: LoaderTree,\n  formState: any,\n  postponedState: PostponedState | null\n): Promise<ReadableStream<Uint8Array>> {\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  const silenceLogger = false\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerResult: null | ReactServerResult = null\n\n  const setHeader = res.setHeader.bind(res)\n\n  try {\n    if (\n      // We only want this behavior when running `next dev`\n      renderOpts.dev &&\n      // We only want this behavior when we have React's dev builds available\n      process.env.NODE_ENV === 'development' &&\n      // Edge routes never prerender so we don't have a Prerender environment for anything in edge runtime\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      // We only have a Prerender environment for projects opted into dynamicIO\n      renderOpts.experimental.dynamicIO\n    ) {\n      // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n      const RSCPayload: InitialRSCPayload & {\n        /** Only available during dynamicIO development builds. Used for logging errors. */\n        _validation?: Promise<React.ReactNode>\n      } = await workUnitAsyncStorage.run(\n        requestStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const [resolveValidation, validationOutlet] = createValidationOutlet()\n      RSCPayload._validation = validationOutlet\n\n      const reactServerStream = await workUnitAsyncStorage.run(\n        requestStore,\n        scheduleInSequentialTasks,\n        () => {\n          requestStore.prerenderPhase = true\n          return ComponentMod.renderToReadableStream(\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n              environmentName: () =>\n                requestStore.prerenderPhase === true ? 'Prerender' : 'Server',\n              filterStackFrame(url: string, _functionName: string): boolean {\n                // The default implementation filters out <anonymous> stack frames\n                // but we want to retain them because current Server Components and\n                // built-in Components in parent stacks don't have source location.\n                return !url.startsWith('node:') && !url.includes('node_modules')\n              },\n            }\n          )\n        },\n        () => {\n          requestStore.prerenderPhase = false\n        }\n      )\n\n      spawnDynamicValidationInDev(\n        resolveValidation,\n        tree,\n        ctx,\n        res.statusCode === 404,\n        clientReferenceManifest,\n        workStore.route\n      )\n\n      reactServerResult = new ReactServerResult(reactServerStream)\n    } else {\n      // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n      const RSCPayload = await workUnitAsyncStorage.run(\n        requestStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n\n      reactServerResult = new ReactServerResult(\n        workUnitAsyncStorage.run(\n          requestStore,\n          ComponentMod.renderToReadableStream,\n          RSCPayload,\n          clientReferenceManifest.clientModules,\n          {\n            onError: serverComponentsErrorHandler,\n          }\n        )\n      )\n    }\n\n    // React doesn't start rendering synchronously but we want the RSC render to have a chance to start\n    // before we begin SSR rendering because we want to capture any available preload headers so we tick\n    // one task before continuing\n    await waitAtLeastOneReactRenderTask()\n\n    // If provided, the postpone state should be parsed as JSON so it can be\n    // provided to React.\n    if (typeof renderOpts.postponed === 'string') {\n      if (postponedState?.type === DynamicState.DATA) {\n        // We have a complete HTML Document in the prerender but we need to\n        // still include the new server component render because it was not included\n        // in the static prelude.\n        const inlinedReactServerDataStream = createInlinedDataReadableStream(\n          reactServerResult.tee(),\n          ctx.nonce,\n          formState\n        )\n\n        return chainStreams(\n          inlinedReactServerDataStream,\n          createDocumentClosingStream()\n        )\n      } else if (postponedState) {\n        // We assume we have dynamic HTML requiring a resume render to complete\n        const postponed = getPostponedFromState(postponedState)\n\n        const resume = require('react-dom/server.edge')\n          .resume as (typeof import('react-dom/server.edge'))['resume']\n\n        const htmlStream = await workUnitAsyncStorage.run(\n          requestStore,\n          resume,\n          <App\n            reactServerStream={reactServerResult.tee()}\n            preinitScripts={preinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n            nonce={ctx.nonce}\n          />,\n          postponed,\n          {\n            onError: htmlRendererErrorHandler,\n            nonce: ctx.nonce,\n          }\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        return await continueDynamicHTMLResume(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consume(),\n            ctx.nonce,\n            formState\n          ),\n          getServerInsertedHTML,\n        })\n      }\n    }\n\n    // This is a regular dynamic render\n    const renderToReadableStream = require('react-dom/server.edge')\n      .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n    const htmlStream = await workUnitAsyncStorage.run(\n      requestStore,\n      renderToReadableStream,\n      <App\n        reactServerStream={reactServerResult.tee()}\n        preinitScripts={preinitScripts}\n        clientReferenceManifest={clientReferenceManifest}\n        ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n        nonce={ctx.nonce}\n      />,\n      {\n        onError: htmlRendererErrorHandler,\n        nonce: ctx.nonce,\n        onHeaders: (headers: Headers) => {\n          headers.forEach((value, key) => {\n            setHeader(key, value)\n          })\n        },\n        maxHeadersLength: renderOpts.reactMaxHeadersLength,\n        // When debugging the static shell, client-side rendering should be\n        // disabled to prevent blanking out the page.\n        bootstrapScripts: renderOpts.isDebugStaticShell\n          ? []\n          : [bootstrapScript],\n        formState,\n      }\n    )\n\n    const getServerInsertedHTML = makeGetServerInsertedHTML({\n      polyfills,\n      renderServerInsertedHTML,\n      serverCapturedErrors: allCapturedErrors,\n      basePath: renderOpts.basePath,\n      tracingMetadata: tracingMetadata,\n    })\n    /**\n     * Rules of Static & Dynamic HTML:\n     *\n     *    1.) We must generate static HTML unless the caller explicitly opts\n     *        in to dynamic HTML support.\n     *\n     *    2.) If dynamic HTML support is requested, we must honor that request\n     *        or throw an error. It is the sole responsibility of the caller to\n     *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n     *\n     * These rules help ensure that other existing features like request caching,\n     * coalescing, and ISR continue working as intended.\n     */\n    const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n    const validateRootLayout = renderOpts.dev\n    return await continueFizzStream(htmlStream, {\n      inlinedDataStream: createInlinedDataReadableStream(\n        reactServerResult.consume(),\n        ctx.nonce,\n        formState\n      ),\n      isStaticGeneration: generateStaticHTML,\n      getServerInsertedHTML,\n      serverInsertedHTMLToHead: true,\n      validateRootLayout,\n    })\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    let errorType: 'not-found' | 'redirect' | undefined\n\n    if (isNotFoundError(err)) {\n      errorType = 'not-found'\n      res.statusCode = 404\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      // If there were mutable cookies set, we need to set them on the\n      // response.\n      const headers = new Headers()\n      if (appendMutableCookies(headers, ctx.requestStore.mutableCookies)) {\n        setHeader('set-cookie', Array.from(headers.values()))\n      }\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      requestStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      requestStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    if (reactServerResult === null) {\n      // We errored when we did not have an RSC stream to read from. This is not just a render\n      // error, we need to throw early\n      throw err\n    }\n\n    try {\n      const fizzStream = await workUnitAsyncStorage.run(\n        requestStore,\n        renderToInitialFizzStream,\n        {\n          ReactDOMServer: require('react-dom/server.edge'),\n          element: (\n            <AppWithoutContext\n              reactServerStream={errorServerStream}\n              preinitScripts={errorPreinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              nonce={ctx.nonce}\n            />\n          ),\n          streamOptions: {\n            nonce: ctx.nonce,\n            // Include hydration scripts in the HTML\n            bootstrapScripts: [errorBootstrapScript],\n            formState,\n          },\n        }\n      )\n\n      /**\n       * Rules of Static & Dynamic HTML:\n       *\n       *    1.) We must generate static HTML unless the caller explicitly opts\n       *        in to dynamic HTML support.\n       *\n       *    2.) If dynamic HTML support is requested, we must honor that request\n       *        or throw an error. It is the sole responsibility of the caller to\n       *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n       *\n       * These rules help ensure that other existing features like request caching,\n       * coalescing, and ISR continue working as intended.\n       */\n      const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n      const validateRootLayout = renderOpts.dev\n      return await continueFizzStream(fizzStream, {\n        inlinedDataStream: createInlinedDataReadableStream(\n          // This is intentionally using the readable datastream from the\n          // main render rather than the flight data from the error page\n          // render\n          reactServerResult.consume(),\n          ctx.nonce,\n          formState\n        ),\n        isStaticGeneration: generateStaticHTML,\n        getServerInsertedHTML: makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: [],\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        }),\n        serverInsertedHTMLToHead: true,\n        validateRootLayout,\n      })\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nfunction createValidationOutlet() {\n  let resolveValidation: (value: React.ReactNode) => void\n  let outlet = new Promise<React.ReactNode>((resolve) => {\n    resolveValidation = resolve\n  })\n  return [resolveValidation!, outlet] as const\n}\n\nasync function spawnDynamicValidationInDev(\n  resolveValidation: (validatingElement: React.ReactNode) => void,\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  isNotFound: boolean,\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>,\n  route: string\n): Promise<void> {\n  const { componentMod: ComponentMod } = ctx\n\n  const cacheSignal = new CacheSignal()\n  const firstAttemptServerController = new AbortController()\n  let serverDynamicTracking = createDynamicTrackingState(false)\n\n  const firstAttemptServerPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: firstAttemptServerController.signal,\n    cacheSignal,\n    // During the prospective render we don't want to synchronously abort on dynamic access\n    // because it could prevent us from discovering all caches in siblings. So we omit the controller\n    // from the prerender store this time.\n    controller: firstAttemptServerController,\n    // With PPR during Prerender we don't need to track individual dynamic reasons\n    // because we will always do a final render after caches have filled and we\n    // will track it again there\n    dynamicTracking: null,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    // Dev only property that allows certain logs to be suppressed\n    validating: true,\n  }\n\n  const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n    firstAttemptServerPrerenderStore,\n    getRSCPayload,\n    tree,\n    ctx,\n    isNotFound\n  )\n\n  let reactServerStream = await workUnitAsyncStorage.run(\n    firstAttemptServerPrerenderStore,\n    ComponentMod.renderToReadableStream,\n    firstAttemptRSCPayload,\n    clientReferenceManifest.clientModules,\n    {\n      signal: firstAttemptServerController.signal,\n      onError: () => {},\n    }\n  )\n\n  await cacheSignal.cacheReady()\n  firstAttemptServerController.abort()\n\n  const secondAttemptServerController = new AbortController()\n  serverDynamicTracking = createDynamicTrackingState(false)\n\n  const secondAttemptServerPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: secondAttemptServerController.signal,\n    cacheSignal: null,\n    // During the prospective render we don't want to synchronously abort on dynamic access\n    // because it could prevent us from discovering all caches in siblings. So we omit the controller\n    // from the prerender store this time.\n    controller: secondAttemptServerController,\n    // With PPR during Prerender we don't need to track individual dynamic reasons\n    // because we will always do a final render after caches have filled and we\n    // will track it again there\n    dynamicTracking: serverDynamicTracking,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    // Dev only property that allows certain logs to be suppressed\n    validating: true,\n  }\n\n  const secondAttemptRSCPayload = await workUnitAsyncStorage.run(\n    secondAttemptServerPrerenderStore,\n    getRSCPayload,\n    tree,\n    ctx,\n    isNotFound\n  )\n\n  reactServerStream = await workUnitAsyncStorage.run(\n    secondAttemptServerPrerenderStore,\n    scheduleInSequentialTasks,\n    () => {\n      const stream = ComponentMod.renderToReadableStream(\n        secondAttemptRSCPayload,\n        clientReferenceManifest.clientModules,\n        {\n          signal: secondAttemptServerController.signal,\n          onError: () => {},\n        }\n      )\n      return asHaltedStream(stream, secondAttemptServerController.signal)\n    },\n    () => {\n      secondAttemptServerController.abort()\n    }\n  )\n\n  const [warmupStream, renderStream] = reactServerStream.tee()\n\n  await warmFlightResponse(warmupStream, clientReferenceManifest)\n\n  const { ServerInsertedHTMLProvider } = createServerInsertedHTML()\n  const nonce = '1'\n\n  const prerender = require('react-dom/static.edge')\n    .prerender as (typeof import('react-dom/static.edge'))['prerender']\n\n  let clientDynamicTracking = createDynamicTrackingState(false)\n  let dynamicValidation = createDynamicValidationState()\n\n  const firstAttemptClientController = new AbortController()\n  const firstAttemptClientPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: firstAttemptClientController.signal,\n    // For HTML Generation we don't need to track cache reads (RSC only)\n    cacheSignal: null,\n    // We expect the SSR render to complete in a single Task and need to be able to synchronously abort\n    // When you use APIs that are considered dynamic or synchronous IO.\n    controller: firstAttemptClientController,\n    // We do track dynamic access because searchParams and certain hooks can still be\n    // dynamic during SSR\n    dynamicTracking: clientDynamicTracking,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    validating: true,\n  }\n\n  const [firstAttemptReactServerStream, secondAttemptReactServerStream] =\n    renderStream.tee()\n  let hadException = false\n  try {\n    await prerenderAndAbortInSequentialTasks(\n      async () => {\n        workUnitAsyncStorage\n          .run(\n            firstAttemptClientPrerenderStore,\n            prerender,\n            <App\n              reactServerStream={firstAttemptReactServerStream}\n              preinitScripts={() => {}}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={nonce}\n            />,\n            {\n              signal: firstAttemptClientController.signal,\n              onError: (err: unknown, errorInfo: ErrorInfo) => {\n                if (\n                  isPrerenderInterruptedError(err) ||\n                  firstAttemptServerController.signal.aborted\n                ) {\n                  const componentStack: string | undefined = (errorInfo as any)\n                    .componentStack\n                  if (\n                    typeof componentStack === 'string' &&\n                    err instanceof Error\n                  ) {\n                    trackAllowedDynamicAccess(\n                      route,\n                      componentStack,\n                      dynamicValidation,\n                      serverDynamicTracking,\n                      clientDynamicTracking\n                    )\n                  }\n                }\n              },\n            }\n          )\n          .catch(() => {})\n        return null\n      },\n      () => {\n        firstAttemptClientController.abort()\n      }\n    ).catch(() => {})\n  } catch (err: unknown) {\n    if (firstAttemptClientController.signal.aborted) {\n      // We aborted the render normally and can ignore this error\n    } else {\n      hadException = true\n      // We're going to retry to so we normally would suppress this error but\n      // when verbose logging is on we print it\n      if (process.env.__NEXT_VERBOSE_LOGGING) {\n        printDebugThrownValueForProspectiveRender(err, route)\n      }\n    }\n  }\n\n  if (hadException || clientDynamicTracking.syncDynamicErrorWithStack) {\n    // We threw something unexpected in the initial render prior to aborting or\n    // we observed a sync abort. In either case we attempt a final render to see if\n    // the error was caused by module loading scope or some other transient cause\n\n    // Reset tracking objects\n    clientDynamicTracking = createDynamicTrackingState(false)\n    dynamicValidation = createDynamicValidationState()\n\n    const secondAttemptClientController = new AbortController()\n    const secondAttemptClientPrerenderStore: PrerenderStore = {\n      type: 'prerender',\n      phase: 'render',\n      implicitTags: [],\n      renderSignal: secondAttemptClientController.signal,\n      // For HTML Generation we don't need to track cache reads (RSC only)\n      cacheSignal: null,\n      // We expect the SSR render to complete in a single Task and need to be able to synchronously abort\n      // When you use APIs that are considered dynamic or synchronous IO.\n      controller: secondAttemptClientController,\n      // We do track dynamic access because searchParams and certain hooks can still be\n      // dynamic during SSR\n      dynamicTracking: clientDynamicTracking,\n      revalidate: INFINITE_CACHE,\n      expire: INFINITE_CACHE,\n      stale: INFINITE_CACHE,\n      tags: [],\n      validating: true,\n    }\n\n    try {\n      await prerenderAndAbortInSequentialTasks(\n        async () => {\n          workUnitAsyncStorage\n            .run(\n              secondAttemptClientPrerenderStore,\n              prerender,\n              <App\n                reactServerStream={secondAttemptReactServerStream}\n                preinitScripts={() => {}}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={nonce}\n              />,\n              {\n                signal: secondAttemptClientController.signal,\n                onError: (err: unknown, errorInfo: ErrorInfo) => {\n                  if (\n                    isPrerenderInterruptedError(err) ||\n                    secondAttemptClientController.signal.aborted\n                  ) {\n                    const componentStack: string | undefined = (\n                      errorInfo as any\n                    ).componentStack\n                    if (\n                      typeof componentStack === 'string' &&\n                      err instanceof Error\n                    ) {\n                      trackAllowedDynamicAccess(\n                        route,\n                        componentStack,\n                        dynamicValidation,\n                        serverDynamicTracking,\n                        clientDynamicTracking\n                      )\n                    }\n                  }\n                },\n              }\n            )\n            .catch(() => {})\n          return null\n        },\n        () => {\n          secondAttemptClientController.abort()\n        }\n      )\n    } catch (err) {\n      if (secondAttemptClientController.signal.aborted) {\n        // We aborted the render normally and can ignore this error\n      } else {\n        // We errored in the shell. This should also mean the normal render errored\n        // in the same place so we omit this log except when verbose mode is on.\n        if (process.env.__NEXT_VERBOSE_LOGGING) {\n          printDebugThrownValueForProspectiveRender(err, route)\n        }\n      }\n    }\n  }\n\n  function LogDynamicValidation() {\n    try {\n      throwIfDisallowedDynamic(\n        route,\n        dynamicValidation,\n        serverDynamicTracking,\n        clientDynamicTracking\n      )\n    } catch {}\n    return null\n  }\n\n  resolveValidation(<LogDynamicValidation />)\n}\n\nfunction asHaltedStream(\n  stream: ReadableStream<Uint8Array>,\n  signal: AbortSignal\n) {\n  return new ReadableStream({\n    start(controller: ReadableStreamDefaultController<Uint8Array>) {\n      const reader = stream.getReader()\n      function errorStream(err: unknown) {\n        controller.error(err)\n        reader.cancel(err)\n      }\n      function progressStream({\n        done,\n        value,\n      }: ReadableStreamReadResult<Uint8Array>) {\n        if (done) {\n          // We don't actually close the outer stream because\n          // we might have aborted the inner one but we are simulating a halt\n          return\n        } else {\n          if (!signal.aborted) {\n            controller.enqueue(value)\n            reader.read().then(progressStream, errorStream)\n          } else {\n            // If the signal aborted we leave the stream open but no longer pull from the upstream\n            reader.cancel()\n          }\n        }\n      }\n      reader.read().then(progressStream, errorStream)\n    },\n  })\n}\n\ntype PrerenderToStreamResult = {\n  stream: ReadableStream<Uint8Array>\n  digestErrorsMap: Map<string, DigestedError>\n  ssrErrors: Array<unknown>\n  dynamicAccess?: null | Array<DynamicAccess>\n  collectedRevalidate: number\n  collectedExpire: number\n  collectedStale: number\n  collectedTags: null | string[]\n}\n\n/**\n * Determines whether we should generate static flight data.\n */\nfunction shouldGenerateStaticFlightData(workStore: WorkStore): boolean {\n  const { fallbackRouteParams, isStaticGeneration } = workStore\n  if (!isStaticGeneration) return false\n\n  if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n    return false\n  }\n\n  return true\n}\n\nasync function prerenderToStream(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  metadata: AppPageRenderResultMetadata,\n  workStore: WorkStore,\n  tree: LoaderTree\n): Promise<PrerenderToStreamResult> {\n  ctx.requestStore.phase = 'render'\n\n  // When prerendering formState is always null. We still include it\n  // because some shared APIs expect a formState value and this is slightly\n  // more explicit than making it an optional function argument\n  const formState = null\n\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n  const fallbackRouteParams = workStore.fallbackRouteParams\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  // We don't report errors during prerendering through our instrumentation hooks\n  const silenceLogger = !!renderOpts.experimental.isRoutePPREnabled\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerPrerenderResult: null | ReactServerPrerenderResult = null\n  const setHeader = (name: string, value: string | string[]) => {\n    res.setHeader(name, value)\n\n    metadata.headers ??= {}\n    metadata.headers[name] = res.getHeader(name)\n\n    return res\n  }\n\n  let prerenderStore: PrerenderStore | null = null\n\n  try {\n    if (renderOpts.experimental.dynamicIO) {\n      if (renderOpts.experimental.isRoutePPREnabled) {\n        /**\n         * dynamicIO with PPR\n         *\n         * The general approach is to render the RSC stream first allowing any cache reads to resolve.\n         * Once we have settled all cache reads we restart the render and abort after a single Task.\n         *\n         * Unlike with the non PPR case we can't synchronously abort the render when a dynamic API is used\n         * during the initial render because we need to ensure all caches can be filled as part of the initial Task\n         * and a synchronous abort might prevent us from filling all caches.\n         *\n         * Once the render is complete we allow the SSR render to finish and use a combination of the postponed state\n         * and the reactServerIsDynamic value to determine how to treat the resulting render\n         */\n\n        // Prerender controller represents the lifetime of the prerender.\n        // It will be aborted when a Task is complete or a synchronously aborting\n        // API is called. Notably during cache-filling renders this does not actually\n        // terminate the render itself which will continue until all caches are filled\n        const initialServerPrerenderController = new AbortController()\n\n        // This controller represents the lifetime of the React render call. Notably\n        // during the cache-filling render it is different from the prerender controller\n        // because we don't want to end the react render until all caches are filled.\n        const initialServerRenderController = new AbortController()\n\n        // The cacheSignal helps us track whether caches are still filling or we are ready\n        // to cut the render off.\n        const cacheSignal = new CacheSignal()\n\n        const initialServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: initialServerRenderController.signal,\n          controller: initialServerPrerenderController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const initialServerPayload = await workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        const pendingInitialServerResult = workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          ComponentMod.prerender,\n          initialServerPayload,\n          clientReferenceManifest.clientModules,\n          {\n            onError: (err: unknown) => {\n              if (initialServerPrerenderController.signal.aborted) {\n                // The render aborted before this error was handled which indicates\n                // the error is caused by unfinished components within the render\n                return\n              } else if (\n                process.env.NEXT_DEBUG_BUILD ||\n                process.env.__NEXT_VERBOSE_LOGGING\n              ) {\n                printDebugThrownValueForProspectiveRender(err, workStore.route)\n              }\n            },\n            // we don't care to track postpones during the prospective render because we need\n            // to always do a final render anyway\n            onPostpone: undefined,\n            // We don't want to stop rendering until the cacheSignal is complete so we pass\n            // a different signal to this render call than is used by dynamic APIs to signify\n            // transitioning out of the prerender environment\n            signal: initialServerRenderController.signal,\n          }\n        )\n\n        await cacheSignal.cacheReady()\n        initialServerRenderController.abort()\n        initialServerPrerenderController.abort()\n\n        let initialServerResult\n        try {\n          initialServerResult = await createReactServerPrerenderResult(\n            pendingInitialServerResult\n          )\n        } catch (err) {\n          if (\n            initialServerRenderController.signal.aborted ||\n            initialServerPrerenderController.signal.aborted\n          ) {\n            // These are expected errors that might error the prerender. we ignore them.\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            // We don't normally log these errors because we are going to retry anyway but\n            // it can be useful for debugging Next.js itself to get visibility here when needed\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n        }\n\n        if (initialServerResult) {\n          // Before we attempt the SSR initial render we need to ensure all client modules\n          // are already loaded.\n          await warmFlightResponse(\n            initialServerResult.asStream(),\n            clientReferenceManifest\n          )\n\n          const initialClientController = new AbortController()\n          const initialClientPrerenderStore: PrerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: ctx.requestStore.implicitTags,\n            renderSignal: initialClientController.signal,\n            controller: initialClientController,\n            cacheSignal: null,\n            dynamicTracking: null,\n            revalidate: INFINITE_CACHE,\n            expire: INFINITE_CACHE,\n            stale: INFINITE_CACHE,\n            tags: [...ctx.requestStore.implicitTags],\n          }\n\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          await prerenderAndAbortInSequentialTasks(\n            () =>\n              workUnitAsyncStorage.run(\n                initialClientPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={initialServerResult.asUnclosingStream()}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: initialClientController.signal,\n                  onError: (err: unknown, _errorInfo: ErrorInfo) => {\n                    if (initialClientController.signal.aborted) {\n                      // These are expected errors that might error the prerender. we ignore them.\n                    } else if (\n                      process.env.NEXT_DEBUG_BUILD ||\n                      process.env.__NEXT_VERBOSE_LOGGING\n                    ) {\n                      // We don't normally log these errors because we are going to retry anyway but\n                      // it can be useful for debugging Next.js itself to get visibility here when needed\n                      printDebugThrownValueForProspectiveRender(\n                        err,\n                        workStore.route\n                      )\n                    }\n                  },\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              ),\n            () => {\n              initialClientController.abort()\n            }\n          ).catch((err) => {\n            if (\n              initialServerRenderController.signal.aborted ||\n              isPrerenderInterruptedError(err)\n            ) {\n              // These are expected errors that might error the prerender. we ignore them.\n            } else if (\n              process.env.NEXT_DEBUG_BUILD ||\n              process.env.__NEXT_VERBOSE_LOGGING\n            ) {\n              // We don't normally log these errors because we are going to retry anyway but\n              // it can be useful for debugging Next.js itself to get visibility here when needed\n              printDebugThrownValueForProspectiveRender(err, workStore.route)\n            }\n          })\n        }\n\n        let serverIsDynamic = false\n        const finalServerController = new AbortController()\n        const serverDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalRenderPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: finalServerController.signal,\n          controller: finalServerController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: serverDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        const finalAttemptRSCPayload = await workUnitAsyncStorage.run(\n          finalRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n        const reactServerResult = (reactServerPrerenderResult =\n          await createReactServerPrerenderResult(\n            prerenderAndAbortInSequentialTasks(\n              () =>\n                workUnitAsyncStorage.run(\n                  // The store to scope\n                  finalRenderPrerenderStore,\n                  // The function to run\n                  ComponentMod.prerender,\n                  // ... the arguments for the function to run\n                  finalAttemptRSCPayload,\n                  clientReferenceManifest.clientModules,\n                  {\n                    onError: (err: unknown) => {\n                      if (finalServerController.signal.aborted) {\n                        serverIsDynamic = true\n                        return\n                      }\n\n                      return serverComponentsErrorHandler(err)\n                    },\n                    signal: finalServerController.signal,\n                  }\n                ),\n              () => {\n                finalServerController.abort()\n              }\n            )\n          ))\n\n        const clientDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        const finalClientController = new AbortController()\n        const finalClientPrerenderStore: PrerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: finalClientController.signal,\n          controller: finalClientController,\n          // For HTML Generation we don't need to track cache reads (RSC only)\n          cacheSignal: null,\n          dynamicTracking: clientDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        }\n\n        let clientIsDynamic = false\n        let dynamicValidation = createDynamicValidationState()\n\n        const prerender = require('react-dom/static.edge')\n          .prerender as (typeof import('react-dom/static.edge'))['prerender']\n        let { prelude, postponed } = await prerenderAndAbortInSequentialTasks(\n          () =>\n            workUnitAsyncStorage.run(\n              finalClientPrerenderStore,\n              prerender,\n              <App\n                reactServerStream={reactServerResult.asUnclosingStream()}\n                preinitScripts={preinitScripts}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              {\n                signal: finalClientController.signal,\n                onError: (err: unknown, errorInfo: ErrorInfo) => {\n                  if (\n                    isPrerenderInterruptedError(err) ||\n                    finalClientController.signal.aborted\n                  ) {\n                    clientIsDynamic = true\n\n                    const componentStack: string | undefined = (\n                      errorInfo as any\n                    ).componentStack\n                    if (typeof componentStack === 'string') {\n                      trackAllowedDynamicAccess(\n                        workStore.route,\n                        componentStack,\n                        dynamicValidation,\n                        serverDynamicTracking,\n                        clientDynamicTracking\n                      )\n                    }\n                    return\n                  }\n\n                  return htmlRendererErrorHandler(err, errorInfo)\n                },\n                onHeaders: (headers: Headers) => {\n                  headers.forEach((value, key) => {\n                    setHeader(key, value)\n                  })\n                },\n                maxHeadersLength: renderOpts.reactMaxHeadersLength,\n                // When debugging the static shell, client-side rendering should be\n                // disabled to prevent blanking out the page.\n                bootstrapScripts: renderOpts.isDebugStaticShell\n                  ? []\n                  : [bootstrapScript],\n              }\n            ),\n          () => {\n            finalClientController.abort()\n          }\n        )\n\n        throwIfDisallowedDynamic(\n          workStore.route,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n\n        if (serverIsDynamic || clientIsDynamic) {\n          if (postponed != null) {\n            // Dynamic HTML case\n            metadata.postponed = getDynamicHTMLPostponedState(\n              postponed,\n              fallbackRouteParams\n            )\n          } else {\n            // Dynamic Data case\n            metadata.postponed = getDynamicDataPostponedState()\n          }\n          reactServerResult.consume()\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueDynamicPrerender(prelude, {\n              getServerInsertedHTML,\n            }),\n            dynamicAccess: consumeDynamicAccess(\n              serverDynamicTracking,\n              clientDynamicTracking\n            ),\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedExpire: finalRenderPrerenderStore.expire,\n            collectedStale: finalRenderPrerenderStore.stale,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        } else {\n          // Static case\n          if (workStore.forceDynamic) {\n            throw new StaticGenBailoutError(\n              'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n            )\n          }\n\n          let htmlStream = prelude\n          if (postponed != null) {\n            // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n            // so we can set all the postponed boundaries to client render mode before we store the HTML response\n            const resume = require('react-dom/server.edge')\n              .resume as (typeof import('react-dom/server.edge'))['resume']\n\n            // We don't actually want to render anything so we just pass a stream\n            // that never resolves. The resume call is going to abort immediately anyway\n            const foreverStream = new ReadableStream<Uint8Array>()\n\n            const resumeStream = await resume(\n              <App\n                reactServerStream={foreverStream}\n                preinitScripts={() => {}}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              JSON.parse(JSON.stringify(postponed)),\n              {\n                signal: createPostponedAbortSignal('static prerender resume'),\n                onError: htmlRendererErrorHandler,\n                nonce: ctx.nonce,\n              }\n            )\n\n            // First we write everything from the prerender, then we write everything from the aborted resume render\n            htmlStream = chainStreams(prelude, resumeStream)\n          }\n\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueStaticPrerender(htmlStream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                reactServerResult.consumeAsStream(),\n                ctx.nonce,\n                formState\n              ),\n              getServerInsertedHTML,\n            }),\n            dynamicAccess: consumeDynamicAccess(\n              serverDynamicTracking,\n              clientDynamicTracking\n            ),\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedExpire: finalRenderPrerenderStore.expire,\n            collectedStale: finalRenderPrerenderStore.stale,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        }\n      } else {\n        /**\n         * dynamicIO without PPR\n         *\n         * The general approach is to render the RSC tree first allowing for any inflight\n         * caches to resolve. Once we have settled inflight caches we can check and see if any\n         * synchronous dynamic APIs were used. If so we don't need to bother doing anything more\n         * because the page will be dynamic on re-render anyway\n         *\n         * If no sync dynamic APIs were used we then re-render and abort after a single Task.\n         * If the render errors we know that the page has some dynamic IO. This assumes and relies\n         * upon caches reading from a in process memory cache and resolving in a microtask. While this\n         * is true from our own default cache implementation and if you don't exceed our LRU size it\n         * might not be true for custom cache implementations.\n         *\n         * Future implementations can do some different strategies during build like using IPC to\n         * synchronously fill caches during this special rendering mode. For now this heuristic should work\n         */\n\n        const cache = workStore.incrementalCache\n        if (!cache) {\n          throw new Error(\n            'Expected incremental cache to exist. This is a bug in Next.js'\n          )\n        }\n\n        // Prerender controller represents the lifetime of the prerender.\n        // It will be aborted when a Task is complete or a synchronously aborting\n        // API is called. Notably during cache-filling renders this does not actually\n        // terminate the render itself which will continue until all caches are filled\n        const initialServerPrerenderController = new AbortController()\n\n        // This controller represents the lifetime of the React render call. Notably\n        // during the cache-filling render it is different from the prerender controller\n        // because we don't want to end the react render until all caches are filled.\n        const initialServerRenderController = new AbortController()\n\n        const cacheSignal = new CacheSignal()\n        const initialServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: initialServerRenderController.signal,\n          controller: initialServerPrerenderController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        const initialClientController = new AbortController()\n        const initialClientPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: initialClientController.signal,\n          controller: initialClientController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        let initialServerStream\n        try {\n          initialServerStream = workUnitAsyncStorage.run(\n            initialServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            firstAttemptRSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: (err: unknown) => {\n                if (\n                  initialServerPrerenderController.signal.aborted ||\n                  initialServerRenderController.signal.aborted\n                ) {\n                  // The render aborted before this error was handled which indicates\n                  // the error is caused by unfinished components within the render\n                  return\n                } else if (\n                  process.env.NEXT_DEBUG_BUILD ||\n                  process.env.__NEXT_VERBOSE_LOGGING\n                ) {\n                  printDebugThrownValueForProspectiveRender(\n                    err,\n                    workStore.route\n                  )\n                }\n              },\n              signal: initialServerRenderController.signal,\n            }\n          )\n        } catch (err: unknown) {\n          if (\n            initialServerPrerenderController.signal.aborted ||\n            initialServerRenderController.signal.aborted\n          ) {\n            // These are expected errors that might error the prerender. we ignore them.\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            // We don't normally log these errors because we are going to retry anyway but\n            // it can be useful for debugging Next.js itself to get visibility here when needed\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n        }\n\n        if (initialServerStream) {\n          const [warmupStream, renderStream] = initialServerStream.tee()\n          initialServerStream = null\n          // Before we attempt the SSR initial render we need to ensure all client modules\n          // are already loaded.\n          await warmFlightResponse(warmupStream, clientReferenceManifest)\n\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          const pendingInitialClientResult = workUnitAsyncStorage.run(\n            initialClientPrerenderStore,\n            prerender,\n            <App\n              reactServerStream={renderStream}\n              preinitScripts={preinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            {\n              signal: initialClientController.signal,\n              onError: (err: unknown, _errorInfo: ErrorInfo) => {\n                if (initialClientController.signal.aborted) {\n                  // These are expected errors that might error the prerender. we ignore them.\n                } else if (\n                  process.env.NEXT_DEBUG_BUILD ||\n                  process.env.__NEXT_VERBOSE_LOGGING\n                ) {\n                  // We don't normally log these errors because we are going to retry anyway but\n                  // it can be useful for debugging Next.js itself to get visibility here when needed\n                  printDebugThrownValueForProspectiveRender(\n                    err,\n                    workStore.route\n                  )\n                }\n              },\n              // When debugging the static shell, client-side rendering should be\n              // disabled to prevent blanking out the page.\n              bootstrapScripts: renderOpts.isDebugStaticShell\n                ? []\n                : [bootstrapScript],\n            }\n          )\n          pendingInitialClientResult.catch((err: unknown) => {\n            if (initialClientController.signal.aborted) {\n              // We aborted the render normally and can ignore this error\n            } else {\n              // We're going to retry to so we normally would suppress this error but\n              // when verbose logging is on we print it\n              if (process.env.__NEXT_VERBOSE_LOGGING) {\n                printDebugThrownValueForProspectiveRender(err, workStore.route)\n              }\n            }\n          })\n        }\n\n        await cacheSignal.cacheReady()\n        // It is important that we abort the SSR render first to avoid\n        // connection closed errors from having an incomplete RSC stream\n        initialClientController.abort()\n        initialServerRenderController.abort()\n        initialServerPrerenderController.abort()\n\n        // We've now filled caches and triggered any inadvertant sync bailouts\n        // due to lazy module initialization. We can restart our render to capture results\n\n        let serverIsDynamic = false\n        const finalServerController = new AbortController()\n        const serverDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: finalServerController.signal,\n          controller: finalServerController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: serverDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        let clientIsDynamic = false\n        const finalClientController = new AbortController()\n        const clientDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        const dynamicValidation = createDynamicValidationState()\n\n        const finalClientPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: finalClientController.signal,\n          controller: finalClientController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: clientDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        const finalServerPayload = await workUnitAsyncStorage.run(\n          finalServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        const serverPrerenderStreamResult = await prerenderServerWithPhases(\n          finalServerController.signal,\n          () =>\n            workUnitAsyncStorage.run(\n              finalServerPrerenderStore,\n              ComponentMod.renderToReadableStream,\n              finalServerPayload,\n              clientReferenceManifest.clientModules,\n              {\n                onError: (err: unknown) => {\n                  if (finalServerController.signal.aborted) {\n                    serverIsDynamic = true\n                    if (isPrerenderInterruptedError(err)) {\n                      return err.digest\n                    }\n                    return\n                  }\n\n                  return serverComponentsErrorHandler(err)\n                },\n                signal: finalServerController.signal,\n              }\n            ),\n          () => {\n            finalServerController.abort()\n          }\n        )\n\n        let htmlStream\n        const serverPhasedStream = serverPrerenderStreamResult.asPhasedStream()\n        try {\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          const result = await prerenderClientWithPhases(\n            () =>\n              workUnitAsyncStorage.run(\n                finalClientPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={serverPhasedStream}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: finalClientController.signal,\n                  onError: (err: unknown, errorInfo: ErrorInfo) => {\n                    if (\n                      isPrerenderInterruptedError(err) ||\n                      finalClientController.signal.aborted\n                    ) {\n                      clientIsDynamic = true\n\n                      const componentStack: string | undefined = (\n                        errorInfo as any\n                      ).componentStack\n                      if (typeof componentStack === 'string') {\n                        trackAllowedDynamicAccess(\n                          workStore.route,\n                          componentStack,\n                          dynamicValidation,\n                          serverDynamicTracking,\n                          clientDynamicTracking\n                        )\n                      }\n                      return\n                    }\n\n                    return htmlRendererErrorHandler(err, errorInfo)\n                  },\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              ),\n            () => {\n              finalClientController.abort()\n              serverPhasedStream.assertExhausted()\n            }\n          )\n          htmlStream = result.prelude\n        } catch (err) {\n          if (\n            isPrerenderInterruptedError(err) ||\n            finalClientController.signal.aborted\n          ) {\n            // we don't have a root because the abort errored in the root. We can just ignore this error\n          } else {\n            // This error is something else and should bubble up\n            throw err\n          }\n        }\n\n        throwIfDisallowedDynamic(\n          workStore.route,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n\n        if (serverIsDynamic || clientIsDynamic) {\n          const dynamicReason = serverIsDynamic\n            ? getFirstDynamicReason(serverDynamicTracking)\n            : getFirstDynamicReason(clientDynamicTracking)\n          if (dynamicReason) {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/next-prerender-data`\n            )\n          } else {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically it accessed data without explicitly caching it. See more info here: https://nextjs.org/docs/messages/next-prerender-data`\n            )\n          }\n        }\n\n        // const reactServerResult =\n        //   await createReactServerPrerenderResultFromRender(reactServerStream!)\n\n        metadata.flightData = await streamToBuffer(\n          serverPrerenderStreamResult.asStream()\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        const validateRootLayout = renderOpts.dev\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueFizzStream(htmlStream!, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              serverPrerenderStreamResult.asStream(),\n              ctx.nonce,\n              formState\n            ),\n            isStaticGeneration: true,\n            getServerInsertedHTML,\n            serverInsertedHTMLToHead: true,\n            validateRootLayout,\n          }),\n          dynamicAccess: consumeDynamicAccess(\n            serverDynamicTracking,\n            clientDynamicTracking\n          ),\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: finalServerPrerenderStore.revalidate,\n          collectedExpire: finalServerPrerenderStore.expire,\n          collectedStale: finalServerPrerenderStore.stale,\n          collectedTags: finalServerPrerenderStore.tags,\n        }\n      }\n    } else if (renderOpts.experimental.isRoutePPREnabled) {\n      // We're statically generating with PPR and need to do dynamic tracking\n      let dynamicTracking = createDynamicTrackingState(\n        renderOpts.isDebugDynamicAccesses\n      )\n      const reactServerPrerenderStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      })\n      const RSCPayload = await workUnitAsyncStorage.run(\n        reactServerPrerenderStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            reactServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            // ... the arguments for the function to run\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const ssrPrerenderStore: PrerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      }\n      const prerender = require('react-dom/static.edge')\n        .prerender as (typeof import('react-dom/static.edge'))['prerender']\n      const { prelude, postponed } = await workUnitAsyncStorage.run(\n        ssrPrerenderStore,\n        prerender,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          onHeaders: (headers: Headers) => {\n            headers.forEach((value, key) => {\n              setHeader(key, value)\n            })\n          },\n          maxHeadersLength: renderOpts.reactMaxHeadersLength,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n\n      // After awaiting here we've waited for the entire RSC render to complete. Crucially this means\n      // that when we detect whether we've used dynamic APIs below we know we'll have picked up even\n      // parts of the React Server render that might not be used in the SSR render.\n      const flightData = await streamToBuffer(reactServerResult.asStream())\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = flightData\n      }\n\n      /**\n       * When prerendering there are three outcomes to consider\n       *\n       *   Dynamic HTML:      The prerender has dynamic holes (caused by using Next.js Dynamic Rendering APIs)\n       *                      We will need to resume this result when requests are handled and we don't include\n       *                      any server inserted HTML or inlined flight data in the static HTML\n       *\n       *   Dynamic Data:      The prerender has no dynamic holes but dynamic APIs were used. We will not\n       *                      resume this render when requests are handled but we will generate new inlined\n       *                      flight data since it is dynamic and differences may end up reconciling on the client\n       *\n       *   Static:            The prerender has no dynamic holes and no dynamic APIs were used. We statically encode\n       *                      all server inserted HTML and flight data\n       */\n      // First we check if we have any dynamic holes in our HTML prerender\n      if (accessedDynamicData(dynamicTracking.dynamicAccesses)) {\n        if (postponed != null) {\n          // Dynamic HTML case.\n          metadata.postponed = getDynamicHTMLPostponedState(\n            postponed,\n            fallbackRouteParams\n          )\n        } else {\n          // Dynamic Data case.\n          metadata.postponed = getDynamicDataPostponedState()\n        }\n        // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n        // server inserted html in the static response because the html that is part of the prerender may depend on it\n        // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n        // require the same set so we unify the code path here\n        reactServerResult.consume()\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n        // Rendering the fallback case.\n        metadata.postponed = getDynamicDataPostponedState()\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else {\n        // Static case\n        // We still have not used any dynamic APIs. At this point we can produce an entirely static prerender response\n        if (workStore.forceDynamic) {\n          throw new StaticGenBailoutError(\n            'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n          )\n        }\n\n        let htmlStream = prelude\n        if (postponed != null) {\n          // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n          // so we can set all the postponed boundaries to client render mode before we store the HTML response\n          const resume = require('react-dom/server.edge')\n            .resume as (typeof import('react-dom/server.edge'))['resume']\n\n          // We don't actually want to render anything so we just pass a stream\n          // that never resolves. The resume call is going to abort immediately anyway\n          const foreverStream = new ReadableStream<Uint8Array>()\n\n          const resumeStream = await resume(\n            <App\n              reactServerStream={foreverStream}\n              preinitScripts={() => {}}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            JSON.parse(JSON.stringify(postponed)),\n            {\n              signal: createPostponedAbortSignal('static prerender resume'),\n              onError: htmlRendererErrorHandler,\n              nonce: ctx.nonce,\n            }\n          )\n\n          // First we write everything from the prerender, then we write everything from the aborted resume render\n          htmlStream = chainStreams(prelude, resumeStream)\n        }\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueStaticPrerender(htmlStream, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              reactServerResult.consumeAsStream(),\n              ctx.nonce,\n              formState\n            ),\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      }\n    } else {\n      const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-legacy',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      })\n      // This is a regular static generation. We don't do dynamic tracking because we rely on\n      // the old-school dynamic error handling to bail out of static generation\n      const RSCPayload = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            prerenderLegacyStore,\n            ComponentMod.renderToReadableStream,\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const renderToReadableStream = require('react-dom/server.edge')\n        .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n      const htmlStream = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        renderToReadableStream,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          nonce: ctx.nonce,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n      }\n\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n      return {\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML,\n          serverInsertedHTMLToHead: true,\n        }),\n        // TODO: Should this include the SSR pass?\n        collectedRevalidate: prerenderLegacyStore.revalidate,\n        collectedExpire: prerenderLegacyStore.expire,\n        collectedStale: prerenderLegacyStore.stale,\n        collectedTags: prerenderLegacyStore.tags,\n      }\n    }\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If this is a static generation error, we need to throw it so that it\n    // can be handled by the caller if we're in static generation mode.\n    if (isDynamicServerError(err)) {\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    // If we errored when we did not have an RSC stream to read from. This is\n    // not just a render error, we need to throw early.\n    if (reactServerPrerenderResult === null) {\n      throw err\n    }\n\n    let errorType: 'not-found' | 'redirect' | undefined\n\n    if (isNotFoundError(err)) {\n      errorType = 'not-found'\n      res.statusCode = 404\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      // If there were mutable cookies set, we need to set them on the\n      // response.\n      const headers = new Headers()\n      if (appendMutableCookies(headers, ctx.requestStore.mutableCookies)) {\n        setHeader('set-cookie', Array.from(headers.values()))\n      }\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n      type: 'prerender-legacy',\n      phase: 'render',\n      implicitTags: ctx.requestStore.implicitTags,\n      revalidate: INFINITE_CACHE,\n      expire: INFINITE_CACHE,\n      stale: INFINITE_CACHE,\n      tags: [...ctx.requestStore.implicitTags],\n    })\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    try {\n      const fizzStream = await renderToInitialFizzStream({\n        ReactDOMServer: require('react-dom/server.edge'),\n        element: (\n          <AppWithoutContext\n            reactServerStream={errorServerStream}\n            preinitScripts={errorPreinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            nonce={ctx.nonce}\n          />\n        ),\n        streamOptions: {\n          nonce: ctx.nonce,\n          // Include hydration scripts in the HTML\n          bootstrapScripts: [errorBootstrapScript],\n          formState,\n        },\n      })\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = await streamToBuffer(\n          reactServerPrerenderResult.asStream()\n        )\n      }\n\n      const validateRootLayout = renderOpts.dev\n      return {\n        // Returning the error that was thrown so it can be used to handle\n        // the response in the caller.\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(fizzStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            // This is intentionally using the readable datastream from the\n            // main render rather than the flight data from the error page\n            // render\n            reactServerPrerenderResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML: makeGetServerInsertedHTML({\n            polyfills,\n            renderServerInsertedHTML,\n            serverCapturedErrors: [],\n            basePath: renderOpts.basePath,\n            tracingMetadata: tracingMetadata,\n          }),\n          serverInsertedHTMLToHead: true,\n          validateRootLayout,\n        }),\n        dynamicAccess: null,\n        collectedRevalidate:\n          prerenderStore !== null ? prerenderStore.revalidate : INFINITE_CACHE,\n        collectedExpire:\n          prerenderStore !== null ? prerenderStore.expire : INFINITE_CACHE,\n        collectedStale:\n          prerenderStore !== null ? prerenderStore.stale : INFINITE_CACHE,\n        collectedTags: prerenderStore !== null ? prerenderStore.tags : null,\n      }\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nconst loadingChunks: Set<Promise<unknown>> = new Set()\nconst chunkListeners: Array<(x?: unknown) => void> = []\n\nfunction trackChunkLoading(load: Promise<unknown>) {\n  loadingChunks.add(load)\n  load.finally(() => {\n    if (loadingChunks.has(load)) {\n      loadingChunks.delete(load)\n      if (loadingChunks.size === 0) {\n        // We are not currently loading any chunks. We can notify all listeners\n        for (let i = 0; i < chunkListeners.length; i++) {\n          chunkListeners[i]()\n        }\n        chunkListeners.length = 0\n      }\n    }\n  })\n}\n\nexport async function warmFlightResponse(\n  flightStream: ReadableStream<Uint8Array>,\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n) {\n  let createFromReadableStream\n  if (process.env.TURBOPACK) {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-turbopack/client.edge').createFromReadableStream\n  } else {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge').createFromReadableStream\n  }\n\n  try {\n    createFromReadableStream(flightStream, {\n      serverConsumerManifest: {\n        moduleLoading: clientReferenceManifest.moduleLoading,\n        moduleMap: clientReferenceManifest.ssrModuleMapping,\n        serverModuleMap: null,\n      },\n    })\n  } catch {\n    // We don't want to handle errors here but we don't want it to\n    // interrupt the outer flow. We simply ignore it here and expect\n    // it will bubble up during a render\n  }\n\n  // We'll wait at least one task and then if no chunks have started to load\n  // we'll we can infer that there are none to load from this flight response\n  trackChunkLoading(waitAtLeastOneReactRenderTask())\n  return new Promise((r) => {\n    chunkListeners.push(r)\n  })\n}\n\nconst getGlobalErrorStyles = async (\n  tree: LoaderTree,\n  ctx: AppRenderContext\n): Promise<React.ReactNode | undefined> => {\n  const {\n    modules: { 'global-error': globalErrorModule },\n  } = parseLoaderTree(tree)\n\n  let globalErrorStyles\n  if (globalErrorModule) {\n    const [, styles] = await createComponentStylesAndScripts({\n      ctx,\n      filePath: globalErrorModule[1],\n      getComponent: globalErrorModule[0],\n      injectedCSS: new Set(),\n      injectedJS: new Set(),\n    })\n    globalErrorStyles = styles\n  }\n\n  return globalErrorStyles\n}\n"],"names":["renderToHTMLOrFlight","warmFlightResponse","flightDataPathHeadKey","parseRequestHeaders","headers","options","isDevWarmupRequest","isDevWarmup","isPrefetchRequest","NEXT_ROUTER_PREFETCH_HEADER","toLowerCase","undefined","isHmrRefresh","NEXT_HMR_REFRESH_HEADER","isRSCRequest","RSC_HEADER","shouldProvideFlightRouterState","isRoutePPREnabled","flightRouterState","parseAndValidateFlightRouterState","NEXT_ROUTER_STATE_TREE_HEADER","csp","nonce","getScriptNonceFromHeader","createNotFoundLoaderTree","loaderTree","components","children","PAGE_SEGMENT_KEY","page","makeGetDynamicParamFromSegment","params","pagePath","fallbackRouteParams","getDynamicParamFromSegment","segment","segmentParam","getSegmentParam","key","param","value","has","get","Array","isArray","map","i","encodeURIComponent","isCatchall","type","isOptionalCatchall","dynamicParamType","dynamicParamTypes","treeSegment","split","slice","flatMap","pathSegment","parseParameter","join","getShortDynamicParamType","NonIndex","ctx","is404Page","isInvalidStatusCode","res","statusCode","meta","name","content","generateDynamicRSCPayload","requestStore","phase","flightData","componentMod","tree","createServerSearchParamsForMetadata","createServerParamsForMetadata","createMetadataComponents","MetadataBoundary","ViewportBoundary","appUsingSizeAdjustment","url","query","requestId","workStore","skipFlight","preloadCallbacks","searchParams","MetadataTree","getMetadataReady","metadataContext","createTrackedMetadataContext","pathname","renderOpts","walkTreeWithFlightRouterState","createSegmentPath","child","loaderTreeToFilter","parentParams","isFirst","rscPayloadHead","React","Fragment","injectedCSS","Set","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","path","actionResult","a","f","b","buildId","S","isStaticGeneration","createErrorContext","renderSource","routerKind","routePath","routeType","isAction","revalidateReason","getRevalidateReason","generateDynamicFlightRenderResult","req","onFlightDataRenderError","err","onInstrumentationRequestError","onError","createFlightReactServerErrorHandler","dev","RSCPayload","process","env","NODE_ENV","experimental","dynamicIO","resolveValidation","validationOutlet","createValidationOutlet","_validation","spawnDynamicValidationInDev","clientReferenceManifest","route","flightReadableStream","renderToReadableStream","clientModules","temporaryReferences","FlightRenderResult","fetchMetrics","warmupDevRender","InvariantError","rscPayload","reader","getReader","read","done","prepareInitialCanonicalUrl","search","getRSCPayload","is404","missingSlots","GlobalError","initialTree","createFlightRouterStateFromLoaderTree","errorType","seedData","createComponentTree","firstItem","varyHeader","getHeader","couldBeIntercepted","includes","NEXT_URL","initialHead","globalErrorStyles","getGlobalErrorStyles","P","Preloads","p","assetPrefix","c","m","G","s","postponed","forEach","preloadFn","getErrorRSCPayload","createMetadataContext","initialSeedData","html","id","head","body","App","reactServerStream","preinitScripts","ServerInsertedHTMLProvider","response","use","useFlightStream","initialState","createInitialRouterState","initialFlightData","initialCanonicalUrlParts","initialParallelRoutes","location","prerendered","actionQueue","createMutableActionQueue","HeadManagerContext","require","Provider","appDir","AppRouter","globalErrorComponentAndStyles","AppWithoutContext","renderToHTMLOrFlightImpl","parsedRequestHeaders","requestEndedState","postponedState","isNotFoundPath","requestTimestamp","Date","now","serverActionsManifest","ComponentMod","nextFontManifest","serverActions","enableTainting","__next_app__","instrumented","wrapClientComponentLoader","globalThis","__next_require__","__next_chunk_load__","args","loadingChunk","loadChunk","trackChunkLoading","URL","setAppIsrStatus","NEXT_RUNTIME","isNodeNextRequest","originalRequest","on","prerenderStore","workUnitAsyncStorage","getStore","isPPR","dynamicTracking","dynamicAccesses","length","usedDynamic","forceDynamic","ended","metrics","getClientComponentLoaderMetrics","reset","getTracer","startSpan","NextNodeServerSpan","clientComponentLoading","startTime","clientComponentLoadStart","attributes","clientComponentLoadCount","end","clientComponentLoadTimes","metadata","appUsingSizeAdjust","serverModuleMap","createServerModuleMap","setReferenceManifestsSingleton","patchFetch","taintObjectReference","stripInternalQueries","crypto","randomUUID","nanoid","isActionRequest","getServerActionRequestMetadata","isServerAction","isPrefetch","setRootSpanAttribute","prerenderToStreamWithTracing","wrap","AppRenderSpan","getBodyResult","spanName","prerenderToStream","dynamicAccess","accessedDynamicData","isDebugDynamicAccesses","warn","access","formatDynamicAPIAccesses","digestErrorsMap","size","buildFailingError","values","next","ssrErrors","find","isUserLandError","pendingRevalidates","pendingRevalidateWrites","revalidatedTags","waitUntil","Promise","all","incrementalCache","revalidateTag","Object","collectedTags","fetchTags","staleHeader","String","collectedStale","setHeader","NEXT_ROUTER_STALE_TIME_HEADER","forceStatic","collectedRevalidate","revalidate","INFINITE_CACHE","staticBailoutInfo","description","dynamicUsageDescription","stack","dynamicUsageStack","placeholder","Buffer","from","segmentFlightData","Map","RenderResult","streamToString","stream","renderToStreamWithTracing","renderToStream","formState","actionRequestResult","handleAction","generateFlight","notFoundLoaderTree","result","assignMetadata","serverComponentsHmrCache","Error","parseRelativeUrl","parsePostponedState","implicitTags","getImplicitTags","routeModule","definition","createRequestStoreForRender","onUpdateCookies","previewProps","run","withWorkStore","workAsyncStorage","renderServerInsertedHTML","createServerInsertedHTML","tracingMetadata","getTracedMetadata","getTracePropagationData","clientTraceMetadata","polyfills","buildManifest","polyfillFiles","filter","polyfill","endsWith","src","getAssetQueryString","integrity","subresourceIntegrityManifest","crossOrigin","noModule","bootstrapScript","getRequiredScripts","reactServerErrorsByDigest","silenceLogger","onHTMLRenderRSCError","serverComponentsErrorHandler","createHTMLReactServerErrorHandler","nextExport","onHTMLRenderSSRError","allCapturedErrors","htmlRendererErrorHandler","createHTMLErrorHandler","reactServerResult","bind","scheduleInSequentialTasks","prerenderPhase","environmentName","filterStackFrame","_functionName","startsWith","ReactServerResult","waitAtLeastOneReactRenderTask","DynamicState","DATA","inlinedReactServerDataStream","createInlinedDataReadableStream","tee","chainStreams","createDocumentClosingStream","getPostponedFromState","resume","htmlStream","getServerInsertedHTML","makeGetServerInsertedHTML","serverCapturedErrors","basePath","continueDynamicHTMLResume","inlinedDataStream","consume","onHeaders","maxHeadersLength","reactMaxHeadersLength","bootstrapScripts","isDebugStaticShell","generateStaticHTML","supportsDynamicResponse","validateRootLayout","continueFizzStream","serverInsertedHTMLToHead","isStaticGenBailoutError","message","shouldBailoutToCSR","isBailoutToCSRError","getStackWithoutErrorMessage","error","reason","isNotFoundError","isRedirectError","getRedirectStatusCodeFromError","redirectUrl","addPathPrefix","getURLFromRedirectError","Headers","appendMutableCookies","mutableCookies","errorPreinitScripts","errorBootstrapScript","errorRSCPayload","errorServerStream","fizzStream","renderToInitialFizzStream","ReactDOMServer","element","streamOptions","finalErr","bailOnNotFound","outlet","resolve","isNotFound","cacheSignal","CacheSignal","firstAttemptServerController","AbortController","serverDynamicTracking","createDynamicTrackingState","firstAttemptServerPrerenderStore","renderSignal","signal","controller","expire","stale","tags","validating","firstAttemptRSCPayload","cacheReady","abort","secondAttemptServerController","secondAttemptServerPrerenderStore","secondAttemptRSCPayload","asHaltedStream","warmupStream","renderStream","prerender","clientDynamicTracking","dynamicValidation","createDynamicValidationState","firstAttemptClientController","firstAttemptClientPrerenderStore","firstAttemptReactServerStream","secondAttemptReactServerStream","hadException","prerenderAndAbortInSequentialTasks","errorInfo","isPrerenderInterruptedError","aborted","componentStack","trackAllowedDynamicAccess","catch","__NEXT_VERBOSE_LOGGING","printDebugThrownValueForProspectiveRender","syncDynamicErrorWithStack","secondAttemptClientController","secondAttemptClientPrerenderStore","LogDynamicValidation","throwIfDisallowedDynamic","ReadableStream","start","errorStream","cancel","progressStream","enqueue","then","shouldGenerateStaticFlightData","reactServerPrerenderResult","initialServerPrerenderController","initialServerRenderController","initialServerPrerenderStore","initialServerPayload","pendingInitialServerResult","NEXT_DEBUG_BUILD","onPostpone","initialServerResult","createReactServerPrerenderResult","asStream","initialClientController","initialClientPrerenderStore","asUnclosingStream","_errorInfo","serverIsDynamic","finalServerController","finalRenderPrerenderStore","finalAttemptRSCPayload","finalClientController","finalClientPrerenderStore","clientIsDynamic","prelude","streamToBuffer","getDynamicHTMLPostponedState","getDynamicDataPostponedState","continueDynamicPrerender","consumeDynamicAccess","collectedExpire","StaticGenBailoutError","foreverStream","resumeStream","JSON","parse","stringify","createPostponedAbortSignal","continueStaticPrerender","consumeAsStream","cache","initialServerStream","pendingInitialClientResult","finalServerPrerenderStore","finalServerPayload","serverPrerenderStreamResult","prerenderServerWithPhases","digest","serverPhasedStream","asPhasedStream","prerenderClientWithPhases","assertExhausted","dynamicReason","getFirstDynamicReason","DynamicServerError","reactServerPrerenderStore","createReactServerPrerenderResultFromRender","ssrPrerenderStore","prerenderLegacyStore","isDynamicServerError","loadingChunks","chunkListeners","load","add","finally","delete","flightStream","createFromReadableStream","TURBOPACK","serverConsumerManifest","moduleLoading","moduleMap","ssrModuleMapping","r","push","modules","globalErrorModule","parseLoaderTree","styles","createComponentStylesAndScripts","filePath","getComponent"],"mappings":"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"}